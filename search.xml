<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Resources for reference</title>
      <link href="/2020/04/27/collection/"/>
      <url>/2020/04/27/collection/</url>
      
        <content type="html"><![CDATA[<p>Here I collected and am still collecting useful web pages for future reference:</p><blockquote><p>Documents for hexo-theme-matery:</p></blockquote><ul><li>English:<br><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README.md" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README.md</a></li><li>Chinese:<br><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></li></ul><blockquote><p>How to build a blog with github pages from scratch:</p></blockquote><p><a href="http://www.youtube.com/watch?v=erKYtw4Rfhk" target="_blank" rel="noopener"><img src="http://img.youtube.com/vi/erKYtw4Rfhk/0.jpg" alt></a></p><blockquote><p>Convert youtube url to markdown</p></blockquote><p><a href="http://embedyoutube.org/" target="_blank" rel="noopener">http://embedyoutube.org/</a></p><blockquote><p>How to run R in Jupyter notebook from Anaconda<br><a href="https://docs.anaconda.com/anaconda/navigator/tutorials/r-lang/" target="_blank" rel="noopener">https://docs.anaconda.com/anaconda/navigator/tutorials/r-lang/</a></p></blockquote><blockquote><p>Download pycharm (community version for free)<br><a href="https://www.jetbrains.com/pycharm/download/#section=mac" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/download/#section=mac</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Resources </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> custom </tag>
            
            <tag> theme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>customize-pages</title>
      <link href="/2020/04/27/customize-pages/"/>
      <url>/2020/04/27/customize-pages/</url>
      
        <content type="html"><![CDATA[<h3 id="Understand-the-frame-work"><a href="#Understand-the-frame-work" class="headerlink" title="Understand the frame work"></a>Understand the frame work</h3><p>Conceptually, there are two main moving parts in our GitHub Pages:</p><ul><li>contents, such as our posts, tags and categories. They are like the furniture we want to put in our house</li><li>theme. It is our house which has living room, bedrooms, bathrooms, kitchen.</li><li>We put our contents into the theme we select to build our blog.</li><li>If you want to delete and/ or add pages, it means you change remove and/ or add more rooms to your house, that is, you change the theme.</li></ul><p>With the concepts being said, you go to the _config.yml file under your theme folder, find the menu<br>chunk of code, where you can delete and/ or add pages. This is equal to delete and/ or add icons in the navigation bar.</p><pre><code># main menu navigation url and iconmenu:  Index:    url: /    icon: fa-home  Tags:    url: /tags    icon: fa-tags  Categories:    url: /categories    icon: fa-bookmark  Archives:    url: /archives    icon: fa-archive  About:    url: /about    icon: fa-user-circle-o</code></pre><p>In my experience, I need less pages, so I deleted the corresponding code under menu and their<br>folders in the source folder. It worked well. But I have’t tried to add pages. I assume adding<br>pages will require more changes in the theme. </p>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> custom </tag>
            
            <tag> github pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Python from data science perspective</title>
      <link href="/2020/04/27/basics-concepts/"/>
      <url>/2020/04/27/basics-concepts/</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>is a general-purpose programming language that is becoming more and more popular for doing data science.<br>Companies worldwide are using Python to harvest insights from their data and get a competitive edge. I am making a series of study notes focusing on Python specifically for data science. </p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Addition, subtraction</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Multiplication, division, modulo, and exponentiation</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># How much is your $100 worth after 7 years?</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>100155.0416194.87171000000012</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create a variable savings</span>savings <span class="token operator">=</span> <span class="token number">100</span><span class="token comment" spellcheck="true"># Create a variable growth_multiplier</span>growth_multiplier<span class="token operator">=</span><span class="token number">1.1</span><span class="token comment" spellcheck="true"># Calculate result</span>result<span class="token operator">=</span>savings<span class="token operator">*</span>growth_multiplier<span class="token operator">**</span><span class="token number">7</span><span class="token comment" spellcheck="true"># Print out result</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Fix the printout</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I started with $"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>savings<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and now have $"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">". Awesome!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>194.87171000000012I started with $100 and now have $194.87171000000012. Awesome!</code></pre><h2 id="Type-conversion"><a href="#Type-conversion" class="headerlink" title="Type conversion"></a>Type conversion</h2><p>Using the + operator to paste together two strings can be very useful in building custom messages.</p><p>Suppose, for example, that you’ve calculated the return of your investment and want to summarize the results in a string. Assuming the floats savings and result are defined, you can try something like this:</p><p>print(“I started with $” + savings + “ and now have $” + result + “. Awesome!”)<br>This will not work, though, as you cannot simply sum strings and floats.</p><p>To fix the error, you’ll need to explicitly convert the types of your variables. More specifically, you’ll need str(), to convert a value into a string. str(savings), for example, will convert the float savings to a string.</p><p>Similar functions such as int(), float() and bool() will help you convert Python values into any type.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of pi_string</span>pi_string <span class="token operator">=</span> <span class="token string">"3.1415926"</span><span class="token comment" spellcheck="true"># Convert pi_string into float: pi_float</span>pi_float <span class="token operator">=</span> float<span class="token punctuation">(</span>pi_string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>pi_string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>pi_float<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;str&#39;&gt;&lt;class &#39;float&#39;&gt;</code></pre><h1 id="Equality"><a href="#Equality" class="headerlink" title="Equality"></a>Equality</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Comparison of booleans</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Comparison of integers</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">15</span> <span class="token operator">!=</span> <span class="token number">75</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Comparison of strings</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pyscript"</span> <span class="token operator">==</span> <span class="token string">"PyScript"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Compare a boolean with a numeric</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>FalseTrueFalseTrue</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Comparison of integers</span>x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Comparison of strings</span>y <span class="token operator">=</span> <span class="token string">"test"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test"</span> <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Comparison of booleans</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">></span> <span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>FalseTrueTrue</code></pre><h1 id="Boolean-Operators"><a href="#Boolean-Operators" class="headerlink" title="Boolean Operators"></a>Boolean Operators</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define variables</span>my_kitchen <span class="token operator">=</span> <span class="token number">18.0</span>your_kitchen <span class="token operator">=</span> <span class="token number">14.0</span><span class="token comment" spellcheck="true"># my_kitchen bigger than 10 and smaller than 18?</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_kitchen<span class="token operator">></span><span class="token number">10</span> <span class="token operator">and</span> my_kitchen<span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># my_kitchen smaller than 14 or bigger than 17?</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_kitchen<span class="token operator">&lt;</span><span class="token number">14</span> <span class="token operator">or</span> my_kitchen<span class="token operator">></span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Double my_kitchen smaller than triple your_kitchen?</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_kitchen<span class="token operator">*</span><span class="token number">2</span><span class="token operator">&lt;</span>your_kitchen<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>FalseTrueTrue</code></pre><h2 id="Boolean-operators-with-Numpy"><a href="#Boolean-operators-with-Numpy" class="headerlink" title="Boolean operators with Numpy"></a>Boolean operators with Numpy</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create arrays</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npmy_house <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token punctuation">)</span>your_house <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">14.0</span><span class="token punctuation">,</span> <span class="token number">24.0</span><span class="token punctuation">,</span> <span class="token number">14.25</span><span class="token punctuation">,</span> <span class="token number">9.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># my_house greater than 18.5 or smaller than 10</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>logical_or<span class="token punctuation">(</span>my_house<span class="token operator">></span><span class="token number">18.5</span><span class="token punctuation">,</span> my_house<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Both my_house and your_house smaller than 11</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>my_house<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">,</span> your_house<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[False  True False  True][False False False  True]</code></pre><h1 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if, elif, else"></a>if, elif, else</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define variables</span>room <span class="token operator">=</span> <span class="token string">"kit"</span>area <span class="token operator">=</span> <span class="token number">14.0</span><span class="token comment" spellcheck="true"># if statement for room</span><span class="token keyword">if</span> room <span class="token operator">==</span> <span class="token string">"kit"</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"looking around in the kitchen."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># if statement for area</span><span class="token keyword">if</span> area <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"big place!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>looking around in the kitchen.</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define variables</span>room <span class="token operator">=</span> <span class="token string">"kit"</span>area <span class="token operator">=</span> <span class="token number">14.0</span><span class="token comment" spellcheck="true"># if-else construct for room</span><span class="token keyword">if</span> room <span class="token operator">==</span> <span class="token string">"kit"</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"looking around in the kitchen."</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"looking around elsewhere."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># if-else construct for area :</span><span class="token keyword">if</span> area <span class="token operator">></span> <span class="token number">15</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"big place!"</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pretty small."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>looking around in the kitchen.pretty small.</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define variables</span>room <span class="token operator">=</span> <span class="token string">"bed"</span>area <span class="token operator">=</span> <span class="token number">1.0</span><span class="token comment" spellcheck="true"># if-elif-else construct for room</span><span class="token keyword">if</span> room <span class="token operator">==</span> <span class="token string">"kit"</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"looking around in the kitchen."</span><span class="token punctuation">)</span><span class="token keyword">elif</span> room <span class="token operator">==</span> <span class="token string">"bed"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"looking around in the bedroom."</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"looking around elsewhere."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># if-elif-else construct for area</span><span class="token keyword">if</span> area <span class="token operator">></span> <span class="token number">15</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"big place!"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> area<span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"medium size, nice!"</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pretty small."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>looking around in the bedroom.pretty small.</code></pre><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Lists-what-are-they"><a href="#Lists-what-are-they" class="headerlink" title="Lists, what are they?"></a>Lists, what are they?</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># area variables (in square meters)</span>hall <span class="token operator">=</span> <span class="token number">11.25</span>kit <span class="token operator">=</span> <span class="token number">18.0</span>liv <span class="token operator">=</span> <span class="token number">20.0</span>bed <span class="token operator">=</span> <span class="token number">10.75</span>bath <span class="token operator">=</span> <span class="token number">9.50</span><span class="token comment" spellcheck="true"># Create list areas</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span>hall<span class="token punctuation">,</span> kit<span class="token punctuation">,</span> liv<span class="token punctuation">,</span> bed<span class="token punctuation">,</span> bath<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[11.25, 18.0, 20.0, 10.75, 9.5]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># area variables (in square meters)</span>hall <span class="token operator">=</span> <span class="token number">11.25</span>kit <span class="token operator">=</span> <span class="token number">18.0</span>liv <span class="token operator">=</span> <span class="token number">20.0</span>bed <span class="token operator">=</span> <span class="token number">10.75</span>bath <span class="token operator">=</span> <span class="token number">9.50</span><span class="token comment" spellcheck="true"># Adapt list areas</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> hall<span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> kit<span class="token punctuation">,</span> <span class="token string">"living room"</span><span class="token punctuation">,</span> liv<span class="token punctuation">,</span> <span class="token string">"bedroom"</span><span class="token punctuation">,</span> bed<span class="token punctuation">,</span> <span class="token string">"bathroom"</span><span class="token punctuation">,</span> bath<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;living room&#39;, 20.0, &#39;bedroom&#39;, 10.75, &#39;bathroom&#39;, 9.5]</code></pre><h2 id="list-of-lists"><a href="#list-of-lists" class="headerlink" title="list of lists"></a>list of lists</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># area variables (in square meters)</span>hall <span class="token operator">=</span> <span class="token number">11.25</span>kit <span class="token operator">=</span> <span class="token number">18.0</span>liv <span class="token operator">=</span> <span class="token number">20.0</span>bed <span class="token operator">=</span> <span class="token number">10.75</span>bath <span class="token operator">=</span> <span class="token number">9.50</span><span class="token comment" spellcheck="true"># house information as list of lists</span>house <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> hall<span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token string">"kitchen"</span><span class="token punctuation">,</span> kit<span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token string">"living room"</span><span class="token punctuation">,</span> liv<span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token string">"bedroom"</span><span class="token punctuation">,</span> bed<span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token string">"bathroom"</span><span class="token punctuation">,</span> bath<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print out house</span><span class="token keyword">print</span><span class="token punctuation">(</span>house<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out the type of house</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>house<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[&#39;hallway&#39;, 11.25], [&#39;kitchen&#39;, 18.0], [&#39;living room&#39;, 20.0], [&#39;bedroom&#39;, 10.75], [&#39;bathroom&#39;, 9.5]]&lt;class &#39;list&#39;&gt;</code></pre><h2 id="subsetting-lists"><a href="#subsetting-lists" class="headerlink" title="subsetting lists"></a>subsetting lists</h2><ul><li>python index starts with 0</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create the areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token string">"living room"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print out second element from areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out last element from areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out the area of the living room</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>11.259.520.0</code></pre><h2 id="Subset-and-calculate"><a href="#Subset-and-calculate" class="headerlink" title="Subset and calculate"></a>Subset and calculate</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create the areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token string">"living room"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Sum of kitchen and bedroom area: eat_sleep_area</span>eat_sleep_area <span class="token operator">=</span> areas<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> areas<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print the variable eat_sleep_area</span><span class="token keyword">print</span><span class="token punctuation">(</span>eat_sleep_area<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>28.75</code></pre><h2 id="Slicing-and-dicing"><a href="#Slicing-and-dicing" class="headerlink" title="Slicing and dicing"></a>Slicing and dicing</h2><ul><li>include left, exclude right</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create the areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token string">"living room"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Use slicing to create downstairs</span>downstairs <span class="token operator">=</span> areas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Use slicing to create upstairs</span>upstairs <span class="token operator">=</span> areas<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print out downstairs and upstairs</span><span class="token keyword">print</span><span class="token punctuation">(</span>downstairs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>upstairs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;living room&#39;, 20.0][&#39;bedroom&#39;, 10.75, &#39;bathroom&#39;, 9.5]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create the areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token string">"living room"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Alternative slicing to create downstairs</span>downstairs <span class="token operator">=</span> areas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Alternative slicing to create upstairs</span>upstairs <span class="token operator">=</span> areas<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>g[&#39;g&#39;, &#39;h&#39;]</code></pre><h2 id="list-manipulation"><a href="#list-manipulation" class="headerlink" title="list manipulation"></a>list manipulation</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create the areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token string">"living room"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Correct the bathroom area</span>areas<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10.50</span><span class="token comment" spellcheck="true"># Change "living room" to "chill zone"</span>areas<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"chill zone"</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;chill zone&#39;, 20.0, &#39;bedroom&#39;, 10.75, &#39;bathroom&#39;, 10.5]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create the areas list (updated version)</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token string">"chill zone"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span>         <span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">10.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Add poolhouse data to areas, new list is areas_1</span>areas_1 <span class="token operator">=</span> areas <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">"poolhouse"</span><span class="token punctuation">,</span> <span class="token number">24.5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Add garage data to areas_1, new list is areas_2</span>areas_2 <span class="token operator">=</span> areas_1 <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">"garage"</span><span class="token punctuation">,</span> <span class="token number">15.45</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas_1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas_2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;chill zone&#39;, 20.0, &#39;bedroom&#39;, 10.75, &#39;bathroom&#39;, 10.5, &#39;poolhouse&#39;, 24.5][&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;chill zone&#39;, 20.0, &#39;bedroom&#39;, 10.75, &#39;bathroom&#39;, 10.5, &#39;poolhouse&#39;, 24.5, &#39;garage&#39;, 15.45]</code></pre><pre class="line-numbers language-python"><code class="language-python">areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span>        <span class="token string">"chill zone"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span>         <span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">10.50</span><span class="token punctuation">,</span> <span class="token string">"poolhouse"</span><span class="token punctuation">,</span> <span class="token number">24.5</span><span class="token punctuation">,</span>         <span class="token string">"garage"</span><span class="token punctuation">,</span> <span class="token number">15.45</span><span class="token punctuation">]</span><span class="token keyword">del</span><span class="token punctuation">(</span>areas<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;chill zone&#39;, 20.0, &#39;bedroom&#39;, 10.75, &#39;bathroom&#39;, 10.5, &#39;garage&#39;, 15.45]</code></pre><h2 id="Inner-workings-of-lists"><a href="#Inner-workings-of-lists" class="headerlink" title="Inner workings of lists"></a>Inner workings of lists</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create list areas</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Create areas_copy</span>areas_copy <span class="token operator">=</span> areas<span class="token comment" spellcheck="true"># Change areas_copy</span>areas_copy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5.0</span><span class="token comment" spellcheck="true"># Print areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[5.0, 18.0, 20.0, 10.75, 9.5]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create list areas</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Create areas_copy</span>areas_copy <span class="token operator">=</span> list<span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Change areas_copy</span>areas_copy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5.0</span><span class="token comment" spellcheck="true"># Print areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[11.25, 18.0, 20.0, 10.75, 9.5]</code></pre><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create variables var1 and var2</span>var1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>var2 <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># Print out type of var1</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out length of var1</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Convert var2 to an integer: out2</span>out2 <span class="token operator">=</span> int<span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>out2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;list&#39;&gt;41</code></pre><pre class="line-numbers language-python"><code class="language-python">help<span class="token punctuation">(</span>max<span class="token punctuation">)</span>?max<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Help on built-in function max in module builtins:max(...)    max(iterable, *[, default=obj, key=func]) -&gt; value    max(arg1, arg2, *args, *[, key=func]) -&gt; value    With a single iterable argument, return its biggest item. The    default keyword-only argument specifies an object to return if    the provided iterable is empty.    With two or more arguments, return the largest argument.</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create lists first and second</span>first <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">]</span>second <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Paste together first and second: full</span>full <span class="token operator">=</span> first <span class="token operator">+</span> second<span class="token comment" spellcheck="true"># Sort full in descending order: full_sorted</span>full_sorted <span class="token operator">=</span> sorted<span class="token punctuation">(</span>full<span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out full_sorted</span><span class="token keyword">print</span><span class="token punctuation">(</span>full_sorted<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[20.0, 18.0, 11.25, 10.75, 9.5]</code></pre><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>in python, everything is a object<br>object has methods associated, depending on type<br>method: functions that belong to objects</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># string to experiment with: place</span>place <span class="token operator">=</span> <span class="token string">"poolhouse"</span><span class="token comment" spellcheck="true"># Use upper() on place: place_up</span>place_up <span class="token operator">=</span> place<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out place and place_up</span><span class="token keyword">print</span><span class="token punctuation">(</span>place<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>place_up<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out the number of o's in place</span><span class="token keyword">print</span><span class="token punctuation">(</span>place<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>poolhousePOOLHOUSE3</code></pre><h2 id="List-Methods"><a href="#List-Methods" class="headerlink" title="List Methods"></a>List Methods</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create list areas</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print out the index of the element 20.0</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out how often 9.50 appears in areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">9.50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>21</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create list areas</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Use append twice to add poolhouse and garage size</span>areas<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">24.5</span><span class="token punctuation">)</span>areas<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">15.45</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Reverse the orders of the elements in areas</span>areas<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[11.25, 18.0, 20.0, 10.75, 9.5, 24.5, 15.45][15.45, 24.5, 9.5, 10.75, 20.0, 18.0, 11.25]</code></pre><h2 id="packages-directory-of-python-scripts"><a href="#packages-directory-of-python-scripts" class="headerlink" title="packages: directory of python scripts"></a>packages: directory of python scripts</h2><p> Each script = module</p><p> ● Specify functions, methods, types</p><p> ● Thousands of packages available</p><p> ● Numpy</p><p> ● Matplotlib</p><p> ● Scikit-learn</p><h2 id="Import-package"><a href="#Import-package" class="headerlink" title="Import package"></a>Import package</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of radius</span>r <span class="token operator">=</span> <span class="token number">0.43</span><span class="token comment" spellcheck="true"># Import the math package</span><span class="token keyword">import</span> math<span class="token comment" spellcheck="true"># Calculate C</span>C <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> r <span class="token operator">*</span> math<span class="token punctuation">.</span>pi<span class="token comment" spellcheck="true"># Calculate A</span>A <span class="token operator">=</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># Build printout</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Circumference: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Area: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Circumference: 2.701769682087222Area: 0.5808804816487527</code></pre><h2 id="Selective-import"><a href="#Selective-import" class="headerlink" title="Selective import"></a>Selective import</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of radius</span>r <span class="token operator">=</span> <span class="token number">192500</span><span class="token comment" spellcheck="true"># Import radians function of math package</span><span class="token keyword">from</span> math <span class="token keyword">import</span> radians<span class="token comment" spellcheck="true"># Travel distance of Moon over 12 degrees. Store in dist.</span>dist <span class="token operator">=</span> r <span class="token operator">*</span> radians<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out dist</span><span class="token keyword">print</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>40317.10572106901</code></pre><h2 id="Numeric-Python"><a href="#Numeric-Python" class="headerlink" title="Numeric Python"></a>Numeric Python</h2><p>● Alternative to Python List: NumPy Array</p><p>● Calculations over entire arrays</p><p>● Easy and Fast </p><pre class="line-numbers language-python"><code class="language-python">my_house   <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span>your_house <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">14.0</span><span class="token punctuation">,</span> <span class="token number">24.0</span><span class="token punctuation">,</span> <span class="token number">14.25</span><span class="token punctuation">,</span> <span class="token number">9.0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Create arrays</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npnp_my_house <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>my_house<span class="token punctuation">)</span>np_your_house <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>your_house<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># my_house greater than or equal to 18</span><span class="token keyword">print</span><span class="token punctuation">(</span>np_my_house<span class="token operator">>=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># my_house less than your_house</span><span class="token keyword">print</span><span class="token punctuation">(</span>np_my_house<span class="token operator">&lt;</span>np_your_house<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[ True  True False False][False  True  True False]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out type of my house</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_house<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>my_house<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np_my_house<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>np_my_house<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[18.0, 20.0, 10.75, 9.5]&lt;class &#39;list&#39;&gt;[18.   20.   10.75  9.5 ]&lt;class &#39;numpy.ndarray&#39;&gt;</code></pre><pre class="line-numbers language-python"><code class="language-python">height_in<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># height is available as a regular list</span><span class="token comment" spellcheck="true"># Import numpy</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># Create a numpy array from height_in: np_height_in</span>np_height_in <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>height_in<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out np_height_in</span><span class="token keyword">print</span><span class="token punctuation">(</span>np_height_in<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Convert np_height to m: np_height_m</span>np_height_m <span class="token operator">=</span> np_height_in <span class="token operator">*</span> <span class="token number">0.0254</span><span class="token comment" spellcheck="true"># Print np_height_m</span><span class="token keyword">print</span><span class="token punctuation">(</span>np_height_m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[74 74 72 72 73 69 69 71][1.8796 1.8796 1.8288 1.8288 1.8542 1.7526 1.7526 1.8034]</code></pre><pre class="line-numbers language-python"><code class="language-python">weight_lb <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">208</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># height and weight are available as regular lists</span><span class="token comment" spellcheck="true"># Import numpy</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># Create array from height_in with metric units: np_height_m</span>np_height_m <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>height_in<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.0254</span><span class="token comment" spellcheck="true"># Create array from weight_lb with metric units: np_weight_kg</span>np_weight_kg <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>weight_lb<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.453592</span><span class="token comment" spellcheck="true"># Calculate the BMI: bmi</span>bmi <span class="token operator">=</span> np_weight_kg <span class="token operator">/</span> np_height_m <span class="token operator">**</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># Print out bmi</span><span class="token keyword">print</span><span class="token punctuation">(</span>bmi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[26.70532383 28.88797049 25.76834706 30.51514784 24.40753727 26.58105883 24.3659706  12.55231314]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create the light array</span>light <span class="token operator">=</span> bmi <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token comment" spellcheck="true"># Print out light</span><span class="token keyword">print</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out BMIs of all baseball players whose BMI is below 21</span><span class="token keyword">print</span><span class="token punctuation">(</span>bmi<span class="token punctuation">[</span>light<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[False False False False False False False  True][12.55231314]</code></pre><h2 id="NumPy-Side-Effects"><a href="#NumPy-Side-Effects" class="headerlink" title="NumPy Side Effects"></a>NumPy Side Effects</h2><p>If you compare its functionality with regular Python lists, however, some things have changed.</p><ul><li>First of all, numpy arrays cannot contain elements with different types. If you try to build such a list, some of the elements’ types are changed to end up with a homogeneous list. This is known as type coercion.</li><li>Second, the typical arithmetic operators, such as +, -, * and / have a different meaning for regular Python lists and numpy arrays.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create baseball, a list of lists</span>baseball <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">78.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">102.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">98.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">,</span> <span class="token number">75.2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Import numpy</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># Create a 2D numpy array from baseball: np_baseball</span>np_baseball <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>baseball<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out the type of np_baseball</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>np_baseball<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out the shape of np_baseball</span><span class="token keyword">print</span><span class="token punctuation">(</span>np_baseball<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;numpy.ndarray&#39;&gt;(4, 2)</code></pre><h2 id="NumPy-Basic-Statistics"><a href="#NumPy-Basic-Statistics" class="headerlink" title="NumPy: Basic Statistics"></a>NumPy: Basic Statistics</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># np_baseball is available</span><span class="token comment" spellcheck="true"># Import numpy</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># Create np_height_in from np_baseball</span>np_height_in <span class="token operator">=</span> np_baseball<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print out the mean of np_height_in</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np_height_in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out the median of np_height_in</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>np_height_in<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>198.25199.0</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># np_baseball is available</span><span class="token comment" spellcheck="true"># Import numpy</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># Print mean height (first column)</span>avg <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np_baseball<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Average: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>avg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print median height. Replace 'None'</span>med <span class="token operator">=</span> np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>np_baseball<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Median: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>med<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out the standard deviation on height. Replace 'None'</span>stddev <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>np_baseball<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Standard Deviation: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>stddev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out correlation between first and second column. Replace 'None'</span>corr <span class="token operator">=</span> np<span class="token punctuation">.</span>corrcoef<span class="token punctuation">(</span>np_baseball<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> np_baseball<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Correlation: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>corr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Average: 198.25Median: 199.0Standard Deviation: 14.635146053251399Correlation: [[1.         0.95865738] [0.95865738 1.        ]]</code></pre><h1 id="Index-and-value"><a href="#Index-and-value" class="headerlink" title="Index and value"></a>Index and value</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of countries and capital</span>countries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'spain'</span><span class="token punctuation">,</span> <span class="token string">'france'</span><span class="token punctuation">,</span> <span class="token string">'germany'</span><span class="token punctuation">,</span> <span class="token string">'norway'</span><span class="token punctuation">]</span>capitals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'madrid'</span><span class="token punctuation">,</span> <span class="token string">'paris'</span><span class="token punctuation">,</span> <span class="token string">'berlin'</span><span class="token punctuation">,</span> <span class="token string">'oslo'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Get index of 'germany': ind_ger</span>ind_ger <span class="token operator">=</span> countries<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'germany'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Use ind_ger to print out capital of Germany</span><span class="token keyword">print</span><span class="token punctuation">(</span>capitals<span class="token punctuation">[</span>ind_ger<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>berlin</code></pre><h1 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of dictionary</span>europe <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'spain'</span><span class="token punctuation">:</span><span class="token string">'madrid'</span><span class="token punctuation">,</span> <span class="token string">'france'</span><span class="token punctuation">:</span><span class="token string">'paris'</span><span class="token punctuation">,</span> <span class="token string">'germany'</span><span class="token punctuation">:</span><span class="token string">'berlin'</span><span class="token punctuation">,</span> <span class="token string">'norway'</span><span class="token punctuation">:</span><span class="token string">'oslo'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Print out the keys in europe</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out value that belongs to key 'norway'</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">[</span><span class="token string">'norway'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>dict_keys([&#39;spain&#39;, &#39;france&#39;, &#39;germany&#39;, &#39;norway&#39;])oslo</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of dictionary</span>europe <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'spain'</span><span class="token punctuation">:</span><span class="token string">'madrid'</span><span class="token punctuation">,</span> <span class="token string">'france'</span><span class="token punctuation">:</span><span class="token string">'paris'</span><span class="token punctuation">,</span> <span class="token string">'germany'</span><span class="token punctuation">:</span><span class="token string">'berlin'</span><span class="token punctuation">,</span> <span class="token string">'norway'</span><span class="token punctuation">:</span><span class="token string">'oslo'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Add italy to europe</span>europe<span class="token punctuation">[</span><span class="token string">'italy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'rome'</span><span class="token comment" spellcheck="true"># Print out italy in europe</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'italy'</span> <span class="token keyword">in</span> europe<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Add poland to europe</span>europe<span class="token punctuation">[</span><span class="token string">'poland'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'warsaw'</span><span class="token comment" spellcheck="true"># Print europe</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;spain&#39;: &#39;madrid&#39;, &#39;france&#39;: &#39;paris&#39;, &#39;germany&#39;: &#39;berlin&#39;, &#39;norway&#39;: &#39;oslo&#39;, &#39;italy&#39;: &#39;rome&#39;, &#39;poland&#39;: &#39;warsaw&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of dictionary</span>europe <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'spain'</span><span class="token punctuation">:</span><span class="token string">'madrid'</span><span class="token punctuation">,</span> <span class="token string">'france'</span><span class="token punctuation">:</span><span class="token string">'paris'</span><span class="token punctuation">,</span> <span class="token string">'germany'</span><span class="token punctuation">:</span><span class="token string">'bonn'</span><span class="token punctuation">,</span>          <span class="token string">'norway'</span><span class="token punctuation">:</span><span class="token string">'oslo'</span><span class="token punctuation">,</span> <span class="token string">'italy'</span><span class="token punctuation">:</span><span class="token string">'rome'</span><span class="token punctuation">,</span> <span class="token string">'poland'</span><span class="token punctuation">:</span><span class="token string">'warsaw'</span><span class="token punctuation">,</span>          <span class="token string">'australia'</span><span class="token punctuation">:</span><span class="token string">'vienna'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Print europe</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Update capital of germany</span>europe<span class="token punctuation">[</span><span class="token string">'germany'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'berlin'</span><span class="token comment" spellcheck="true"># Print europe</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;spain&#39;: &#39;madrid&#39;, &#39;france&#39;: &#39;paris&#39;, &#39;germany&#39;: &#39;bonn&#39;, &#39;norway&#39;: &#39;oslo&#39;, &#39;italy&#39;: &#39;rome&#39;, &#39;poland&#39;: &#39;warsaw&#39;, &#39;australia&#39;: &#39;vienna&#39;}{&#39;spain&#39;: &#39;madrid&#39;, &#39;france&#39;: &#39;paris&#39;, &#39;germany&#39;: &#39;berlin&#39;, &#39;norway&#39;: &#39;oslo&#39;, &#39;italy&#39;: &#39;rome&#39;, &#39;poland&#39;: &#39;warsaw&#39;, &#39;australia&#39;: &#39;vienna&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Remove australia</span><span class="token keyword">del</span><span class="token punctuation">(</span>europe<span class="token punctuation">[</span><span class="token string">'australia'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print europe</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;spain&#39;: &#39;madrid&#39;, &#39;france&#39;: &#39;paris&#39;, &#39;germany&#39;: &#39;berlin&#39;, &#39;norway&#39;: &#39;oslo&#39;, &#39;italy&#39;: &#39;rome&#39;, &#39;poland&#39;: &#39;warsaw&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Dictionary of dictionaries</span>europe <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'spain'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'capital'</span><span class="token punctuation">:</span><span class="token string">'madrid'</span><span class="token punctuation">,</span> <span class="token string">'population'</span><span class="token punctuation">:</span><span class="token number">46.77</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token string">'france'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'capital'</span><span class="token punctuation">:</span><span class="token string">'paris'</span><span class="token punctuation">,</span> <span class="token string">'population'</span><span class="token punctuation">:</span><span class="token number">66.03</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token string">'germany'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'capital'</span><span class="token punctuation">:</span><span class="token string">'berlin'</span><span class="token punctuation">,</span> <span class="token string">'population'</span><span class="token punctuation">:</span><span class="token number">80.62</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token string">'norway'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'capital'</span><span class="token punctuation">:</span><span class="token string">'oslo'</span><span class="token punctuation">,</span> <span class="token string">'population'</span><span class="token punctuation">:</span><span class="token number">5.084</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Print out the capital of France</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">[</span><span class="token string">'france'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'capital'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Create sub-dictionary data</span>data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'capital'</span><span class="token punctuation">:</span><span class="token string">'rome'</span><span class="token punctuation">,</span> <span class="token string">'population'</span><span class="token punctuation">:</span><span class="token number">59.83</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Add data to europe under key 'italy'</span>europe<span class="token punctuation">[</span><span class="token string">'italy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token comment" spellcheck="true"># Print europe</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>paris{&#39;spain&#39;: {&#39;capital&#39;: &#39;madrid&#39;, &#39;population&#39;: 46.77}, &#39;france&#39;: {&#39;capital&#39;: &#39;paris&#39;, &#39;population&#39;: 66.03}, &#39;germany&#39;: {&#39;capital&#39;: &#39;berlin&#39;, &#39;population&#39;: 80.62}, &#39;norway&#39;: {&#39;capital&#39;: &#39;oslo&#39;, &#39;population&#39;: 5.084}, &#39;italy&#39;: {&#39;capital&#39;: &#39;rome&#39;, &#39;population&#39;: 59.83}}</code></pre><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><p>is the building block and fundation of data science with Python, we cover some basics here and a seperate class with pandas will follow</p><ul><li>dictionary is very useful, you can think of keys as data columns, and values as the content of each column.</li><li>let us build a pandas dataframe from a dictionary</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment" spellcheck="true"># Build cars DataFrame</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'United States'</span><span class="token punctuation">,</span> <span class="token string">'Australia'</span><span class="token punctuation">,</span> <span class="token string">'Japan'</span><span class="token punctuation">,</span> <span class="token string">'India'</span><span class="token punctuation">,</span> <span class="token string">'Russia'</span><span class="token punctuation">,</span> <span class="token string">'Morocco'</span><span class="token punctuation">,</span> <span class="token string">'Egypt'</span><span class="token punctuation">]</span>dr <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span>cpc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">809</span><span class="token punctuation">,</span> <span class="token number">731</span><span class="token punctuation">,</span> <span class="token number">588</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'country'</span><span class="token punctuation">:</span>names<span class="token punctuation">,</span> <span class="token string">'drives_right'</span><span class="token punctuation">:</span>dr<span class="token punctuation">,</span> <span class="token string">'cars_per_cap'</span><span class="token punctuation">:</span>cpc <span class="token punctuation">}</span>cars <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Definition of row_labels</span>row_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'US'</span><span class="token punctuation">,</span> <span class="token string">'AUS'</span><span class="token punctuation">,</span> <span class="token string">'JAP'</span><span class="token punctuation">,</span> <span class="token string">'IN'</span><span class="token punctuation">,</span> <span class="token string">'RU'</span><span class="token punctuation">,</span> <span class="token string">'MOR'</span><span class="token punctuation">,</span> <span class="token string">'EG'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Specify row labels of cars</span>cars<span class="token punctuation">.</span>index <span class="token operator">=</span> row_labels<span class="token comment" spellcheck="true"># Print cars again</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>         country  drives_right  cars_per_cap0  United States          True           8091      Australia         False           7312          Japan         False           5883          India         False            184         Russia          True           2005        Morocco          True            706          Egypt          True            45           country  drives_right  cars_per_capUS   United States          True           809AUS      Australia         False           731JAP          Japan         False           588IN           India         False            18RU          Russia          True           200MOR        Morocco          True            70EG           Egypt          True            45</code></pre><ul><li>Here, we have index for each row, which is like the label/name of the row, we can access/slice data using the index</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out country column as Pandas Series</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out country column as Pandas DataFrame</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out DataFrame with country and drives_right columns</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>US     United StatesAUS        AustraliaJAP            JapanIN             IndiaRU            RussiaMOR          MoroccoEG             EgyptName: country, dtype: object           countryUS   United StatesAUS      AustraliaJAP          JapanIN           IndiaRU          RussiaMOR        MoroccoEG           Egypt           country  drives_rightUS   United States          TrueAUS      Australia         FalseJAP          Japan         FalseIN           India         FalseRU          Russia          TrueMOR        Morocco          TrueEG           Egypt          True</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out first 3 observations</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out fourth, fifth and sixth observation</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>           country  drives_right  cars_per_capUS   United States          True           809AUS      Australia         False           731JAP          Japan         False           588     country  drives_right  cars_per_capIN     India         False            18RU    Russia          True           200MOR  Morocco          True            70</code></pre><h1 id="loc-and-iloc"><a href="#loc-and-iloc" class="headerlink" title="loc and iloc"></a>loc and iloc</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out observation for Japan</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'JAP'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>country         Japandrives_right    Falsecars_per_cap      588Name: JAP, dtype: object</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out observations for Australia and Egypt</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'AUS'</span><span class="token punctuation">,</span> <span class="token string">'EG'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>       country  drives_right  cars_per_capAUS  Australia         False           731EG       Egypt          True            45</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'IN'</span><span class="token punctuation">,</span> <span class="token string">'cars_per_cap'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>18</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out drives_right value of Morocco</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'MOR'</span><span class="token punctuation">,</span> <span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print sub-DataFrame</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'RU'</span><span class="token punctuation">,</span> <span class="token string">'MOR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>     country  drives_rightRU    Russia          TrueMOR  Morocco          True</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out drives_right column as Series</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>US      TrueAUS    FalseJAP    FalseIN     FalseRU      TrueMOR     TrueEG      TrueName: drives_right, dtype: boolUS      TrueAUS    FalseJAP    FalseIN     FalseRU      TrueMOR     TrueEG      TrueName: drives_right, dtype: bool</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out drives_right column as DataFrame</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>     drives_rightUS           TrueAUS         FalseJAP         FalseIN          FalseRU           TrueMOR          TrueEG           True     drives_rightUS           TrueAUS         FalseJAP         FalseIN          FalseRU           TrueMOR          TrueEG           True</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>cars<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.series.Series&#39;&gt;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>cars<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out cars_per_cap and drives_right as DataFrame</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">'cars_per_cap'</span><span class="token punctuation">,</span> <span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>     cars_per_cap  drives_rightUS            809          TrueAUS           731         FalseJAP           588         FalseIN             18         FalseRU            200          TrueMOR            70          TrueEG             45          True</code></pre><h2 id="Filtering-Pandas-DataFrame"><a href="#Filtering-Pandas-DataFrame" class="headerlink" title="Filtering Pandas DataFrame"></a>Filtering Pandas DataFrame</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Extract drives_right column as Series: dr</span>dr <span class="token operator">=</span> cars<span class="token punctuation">[</span><span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">True</span><span class="token comment" spellcheck="true"># Use dr to subset cars: sel</span>sel <span class="token operator">=</span> cars<span class="token punctuation">[</span>dr<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print sel</span><span class="token keyword">print</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>           country  drives_right  cars_per_capUS   United States          True           809RU          Russia          True           200MOR        Morocco          True            70EG           Egypt          True            45</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Convert code to a one-liner</span>sel <span class="token operator">=</span> cars<span class="token punctuation">[</span>cars<span class="token punctuation">[</span><span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">True</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print sel</span><span class="token keyword">print</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>           country  drives_right  cars_per_capUS   United States          True           809RU          Russia          True           200MOR        Morocco          True            70EG           Egypt          True            45</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create car_maniac: observations that have a cars_per_cap over 500</span>car_maniac <span class="token operator">=</span> cars<span class="token punctuation">[</span>cars<span class="token punctuation">[</span><span class="token string">'cars_per_cap'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">500</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print car_maniac</span><span class="token keyword">print</span><span class="token punctuation">(</span>car_maniac<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>           country  drives_right  cars_per_capUS   United States          True           809AUS      Australia         False           731JAP          Japan         False           588</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># Create medium: observations with cars_per_cap between 100 and 500</span>medium <span class="token operator">=</span> cars<span class="token punctuation">[</span>np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token string">'cars_per_cap'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">100</span><span class="token punctuation">,</span> cars<span class="token punctuation">[</span><span class="token string">'cars_per_cap'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print medium</span><span class="token keyword">print</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>   country  drives_right  cars_per_capRU  Russia          True           200</code></pre><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="While-loop"><a href="#While-loop" class="headerlink" title="While loop"></a>While loop</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Initialize offset</span>offset <span class="token operator">=</span> <span class="token number">8</span><span class="token comment" spellcheck="true"># Code the while loop</span><span class="token keyword">while</span> offset <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"correcting..."</span><span class="token punctuation">)</span>    offset <span class="token operator">=</span> offset <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>correcting...7correcting...6correcting...5correcting...4correcting...3correcting...2correcting...1correcting...0</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Add conditionals</span><span class="token comment" spellcheck="true"># Initialize offset</span>offset <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6</span><span class="token comment" spellcheck="true"># Code the while loop</span><span class="token keyword">while</span> offset <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"correcting..."</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> offset <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        offset <span class="token operator">=</span> offset <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        offset <span class="token operator">=</span> offset <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Code the for loop</span><span class="token keyword">for</span> i <span class="token keyword">in</span> areas<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>11.2518.020.010.759.5</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Change for loop to use enumerate() and update print()</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> size <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>areas<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"room "</span><span class="token operator">+</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>room 0: 11.25room 1: 18.0room 2: 20.0room 3: 10.75room 4: 9.5</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Code the for loop</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> area <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>areas<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"room "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>room 1: 11.25room 2: 18.0room 3: 20.0room 4: 10.75room 5: 9.5</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># house list of lists</span>house <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token string">"living room"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Build a for loop from scratch</span><span class="token keyword">for</span> i <span class="token keyword">in</span> house<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" is"</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" sqm"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>the hallway is 11.25 sqmthe kitchen is 18.0 sqmthe living room is 20.0 sqmthe bedroom is 10.75 sqmthe bathroom is 9.5 sqm</code></pre><h1 id="Loop-over-dictionary"><a href="#Loop-over-dictionary" class="headerlink" title="Loop over dictionary"></a>Loop over dictionary</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of dictionary</span>europe <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'spain'</span><span class="token punctuation">:</span><span class="token string">'madrid'</span><span class="token punctuation">,</span> <span class="token string">'france'</span><span class="token punctuation">:</span><span class="token string">'paris'</span><span class="token punctuation">,</span> <span class="token string">'germany'</span><span class="token punctuation">:</span><span class="token string">'berlin'</span><span class="token punctuation">,</span>          <span class="token string">'norway'</span><span class="token punctuation">:</span><span class="token string">'oslo'</span><span class="token punctuation">,</span> <span class="token string">'italy'</span><span class="token punctuation">:</span><span class="token string">'rome'</span><span class="token punctuation">,</span> <span class="token string">'poland'</span><span class="token punctuation">:</span><span class="token string">'warsaw'</span><span class="token punctuation">,</span> <span class="token string">'austria'</span><span class="token punctuation">:</span><span class="token string">'vienna'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Iterate over europe</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> europe<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"the capital of "</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">" is "</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>the capital of spain is madridthe capital of france is paristhe capital of germany is berlinthe capital of norway is oslothe capital of italy is romethe capital of poland is warsawthe capital of austria is vienna</code></pre><h1 id="Loop-over-data-frame-by-rows"><a href="#Loop-over-data-frame-by-rows" class="headerlink" title="Loop over data frame by rows:"></a>Loop over data frame by rows:</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Iterate over rows of cars</span><span class="token keyword">for</span> lab<span class="token punctuation">,</span> row <span class="token keyword">in</span> cars<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lab<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>UScountry         United Statesdrives_right             Truecars_per_cap              809Name: US, dtype: objectAUScountry         Australiadrives_right        Falsecars_per_cap          731Name: AUS, dtype: objectJAPcountry         Japandrives_right    Falsecars_per_cap      588Name: JAP, dtype: objectINcountry         Indiadrives_right    Falsecars_per_cap       18Name: IN, dtype: objectRUcountry         Russiadrives_right      Truecars_per_cap       200Name: RU, dtype: objectMORcountry         Moroccodrives_right       Truecars_per_cap         70Name: MOR, dtype: objectEGcountry         Egyptdrives_right     Truecars_per_cap       45Name: EG, dtype: object</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Adapt for loop</span><span class="token keyword">for</span> lab<span class="token punctuation">,</span> row <span class="token keyword">in</span> cars<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lab <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'cars_per_cap'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>US: 809AUS: 731JAP: 588IN: 18RU: 200MOR: 70EG: 45</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Code for loop that adds COUNTRY column</span><span class="token keyword">for</span> lab<span class="token punctuation">,</span> row <span class="token keyword">in</span> cars<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>lab<span class="token punctuation">,</span> <span class="token string">"COUNTRY"</span><span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">"country"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print cars</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>           country  drives_right  cars_per_cap        COUNTRYUS   United States          True           809  UNITED STATESAUS      Australia         False           731      AUSTRALIAJAP          Japan         False           588          JAPANIN           India         False            18          INDIARU          Russia          True           200         RUSSIAMOR        Morocco          True            70        MOROCCOEG           Egypt          True            45          EGYPT</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Use .apply(str.upper)</span>cars<span class="token punctuation">[</span><span class="token string">"COUNTRY"</span><span class="token punctuation">]</span> <span class="token operator">=</span> cars<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>str<span class="token punctuation">.</span>upper<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>           country  drives_right  cars_per_cap        COUNTRYUS   United States          True           809  UNITED STATESAUS      Australia         False           731      AUSTRALIAJAP          Japan         False           588          JAPANIN           India         False            18          INDIARU          Russia          True           200         RUSSIAMOR        Morocco          True            70        MOROCCOEG           Egypt          True            45          EGYPT</code></pre><h1 id="Wrap-up-with-a-case-study"><a href="#Wrap-up-with-a-case-study" class="headerlink" title="Wrap up with a case study"></a>Wrap up with a case study</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Import numpy as np</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># Set the seed</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Generate and print random float</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.6964691855978616</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Set the seed</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Use randint() to simulate a dice</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Use randint() again</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>63</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Set the seed</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Starting step</span>step <span class="token operator">=</span> <span class="token number">50</span><span class="token comment" spellcheck="true"># Roll the dice</span>dice <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Finish the control construct</span><span class="token keyword">if</span> dice <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token punctuation">:</span>    step <span class="token operator">=</span> step <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">elif</span> dice <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>    step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    step <span class="token operator">=</span> step <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out dice and step</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>dice<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token operator">+</span> str<span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>6 53</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Set the seed</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Initialize random_walk</span>random_walk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Set step: last element in random_walk</span>    step <span class="token operator">=</span> random_walk<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Roll the dice</span>    dice <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Determine next step</span>    <span class="token keyword">if</span> dice <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>        step <span class="token operator">=</span> step <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">elif</span> dice <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>        step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        step <span class="token operator">=</span> step <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># append next_step to random_walk</span>    random_walk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print random_walk</span><span class="token keyword">print</span><span class="token punctuation">(</span>random_walk<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[0, 3, 4, 5, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 0, -1, 0, 5, 4, 3, 4, 3, 4, 5, 6, 7, 8, 7, 8, 7, 8, 9, 10, 11, 10, 14, 15, 14, 15, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 32, 33, 37, 38, 37, 38, 39, 38, 39, 40, 42, 43, 44, 43, 42, 43, 44, 43, 42, 43, 44, 46, 45, 44, 45, 44, 45, 46, 47, 49, 48, 49, 50, 51, 52, 53, 52, 51, 52, 51, 52, 53, 52, 55, 56, 57, 58, 57, 58, 59]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Import matplotlib.pyplot as plt</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># Plot random_walk</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>random_walk<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Show the plot</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="basics-concepts_files/basics-concepts_117_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Initialize all_walks</span>all_walks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Simulate random walk 10 times</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Code from before</span>    random_walk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        step <span class="token operator">=</span> random_walk<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        dice <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> dice <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>            step <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> step <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> dice <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            step <span class="token operator">=</span> step <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>        random_walk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>step<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Append random_walk to all_walks</span>    all_walks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random_walk<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print all_walks</span><span class="token keyword">print</span><span class="token punctuation">(</span>all_walks<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[0, 4, 3, 2, 4, 3, 4, 6, 7, 8, 13, 12, 13, 14, 15, 16, 17, 16, 21, 22, 23, 24, 23, 22, 21, 20, 19, 20, 21, 22, 28, 27, 26, 25, 26, 27, 28, 27, 28, 29, 28, 33, 34, 33, 32, 31, 30, 31, 30, 29, 31, 32, 35, 36, 38, 39, 40, 41, 40, 39, 40, 41, 42, 43, 42, 43, 44, 45, 48, 49, 50, 49, 50, 49, 50, 51, 52, 56, 55, 54, 55, 56, 57, 56, 57, 56, 57, 59, 64, 63, 64, 65, 66, 67, 68, 69, 68, 69, 70, 71, 73], [0, 2, 1, 2, 3, 6, 5, 6, 5, 6, 7, 8, 7, 8, 7, 8, 9, 11, 10, 9, 10, 11, 10, 12, 13, 14, 15, 16, 17, 18, 17, 18, 19, 24, 25, 24, 23, 22, 21, 22, 23, 24, 29, 30, 29, 30, 31, 32, 33, 34, 35, 34, 33, 34, 33, 39, 38, 39, 38, 39, 38, 39, 43, 47, 49, 51, 50, 51, 53, 52, 58, 59, 61, 62, 61, 62, 63, 64, 63, 64, 65, 66, 68, 67, 66, 67, 73, 78, 77, 76, 80, 81, 82, 83, 85, 84, 85, 84, 85, 84, 83], [0, 6, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 13, 12, 11, 12, 11, 12, 11, 12, 13, 17, 18, 17, 23, 22, 21, 22, 21, 20, 21, 20, 24, 23, 24, 23, 24, 23, 24, 26, 25, 24, 23, 24, 23, 28, 29, 30, 29, 28, 29, 28, 29, 28, 33, 34, 33, 32, 31, 30, 31, 32, 36, 42, 43, 44, 45, 46, 45, 46, 48, 49, 50, 51, 50, 49, 50, 49, 50, 51, 52, 51, 52, 53, 54, 53, 52, 53, 54, 59, 60, 61, 66, 65, 66, 65, 66, 67, 68, 69, 68], [0, 6, 5, 6, 5, 4, 5, 9, 10, 11, 12, 13, 12, 11, 10, 9, 8, 9, 10, 11, 12, 13, 14, 13, 14, 15, 14, 15, 16, 19, 18, 19, 18, 19, 22, 23, 24, 25, 24, 23, 26, 27, 28, 29, 28, 27, 28, 31, 32, 37, 38, 37, 38, 37, 38, 37, 43, 42, 41, 42, 44, 43, 42, 41, 42, 43, 44, 45, 49, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 65, 64, 65, 66, 65, 71, 70, 71, 72, 71, 70, 71, 70, 69, 75, 74, 73, 74, 75, 74, 73], [0, 0, 0, 1, 7, 8, 11, 12, 18, 19, 20, 26, 25, 31, 30, 31, 32, 33, 32, 38, 39, 38, 39, 38, 39, 38, 39, 38, 39, 43, 44, 46, 45, 46, 45, 44, 45, 44, 45, 44, 48, 52, 51, 50, 49, 50, 51, 55, 56, 57, 61, 60, 59, 58, 59, 60, 62, 61, 60, 61, 62, 64, 67, 72, 73, 72, 73, 74, 75, 76, 77, 76, 77, 78, 84, 83, 88, 87, 91, 90, 94, 93, 96, 97, 96, 97, 103, 102, 101, 100, 104, 103, 102, 103, 104, 103, 104, 105, 106, 107, 106], [0, 0, 0, 1, 0, 0, 4, 5, 7, 11, 17, 16, 15, 16, 17, 18, 17, 18, 17, 18, 19, 18, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 32, 35, 36, 35, 34, 35, 36, 37, 36, 35, 34, 33, 34, 35, 36, 37, 38, 39, 40, 39, 40, 41, 43, 42, 43, 44, 47, 49, 50, 49, 48, 47, 46, 45, 46, 45, 46, 48, 49, 50, 49, 50, 49, 48, 49, 48, 47, 46, 47, 46, 45, 46, 47, 48, 50, 51, 52, 51, 50, 51, 57, 56, 57, 58, 63, 62, 63], [0, 0, 1, 2, 1, 2, 3, 9, 10, 11, 12, 11, 13, 14, 15, 16, 15, 16, 17, 18, 19, 18, 19, 18, 19, 20, 19, 20, 24, 25, 28, 29, 33, 34, 33, 34, 35, 34, 33, 38, 39, 40, 39, 38, 39, 40, 41, 40, 44, 43, 44, 45, 46, 47, 48, 49, 50, 49, 48, 47, 48, 49, 53, 54, 53, 54, 55, 54, 60, 61, 62, 63, 62, 63, 64, 67, 66, 67, 66, 65, 64, 65, 66, 68, 69, 70, 74, 75, 74, 73, 74, 75, 74, 73, 74, 75, 76, 75, 74, 75, 76], [0, 1, 0, 1, 2, 1, 0, 0, 1, 2, 3, 4, 5, 10, 14, 13, 14, 13, 12, 11, 12, 11, 12, 13, 12, 16, 17, 16, 17, 16, 15, 16, 15, 19, 20, 21, 22, 23, 24, 23, 24, 25, 26, 27, 28, 27, 32, 33, 34, 33, 34, 33, 34, 35, 34, 35, 40, 41, 42, 41, 42, 43, 44, 43, 44, 43, 44, 45, 44, 43, 42, 43, 44, 43, 42, 41, 42, 46, 47, 48, 49, 50, 51, 50, 51, 52, 51, 52, 57, 58, 57, 56, 57, 56, 55, 54, 58, 59, 60, 61, 60], [0, 1, 2, 3, 4, 5, 4, 3, 6, 5, 4, 3, 2, 3, 9, 10, 9, 10, 11, 10, 9, 10, 11, 12, 11, 15, 16, 15, 17, 18, 17, 18, 19, 20, 21, 22, 23, 22, 21, 22, 23, 22, 23, 24, 23, 22, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 33, 34, 35, 36, 37, 38, 37, 36, 42, 43, 44, 43, 42, 41, 45, 46, 50, 49, 55, 56, 57, 61, 62, 61, 60, 61, 62, 63, 64, 63, 69, 70, 69, 73, 74, 73, 74, 73, 79, 85, 86, 85, 86, 87], [0, 1, 2, 3, 2, 5, 4, 6, 7, 13, 12, 13, 14, 13, 12, 13, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 25, 26, 27, 28, 27, 26, 25, 26, 25, 29, 28, 27, 28, 30, 31, 36, 35, 36, 37, 41, 40, 41, 42, 41, 40, 41, 42, 43, 42, 41, 40, 41, 40, 39, 40, 39, 38, 37, 38, 39, 38, 37, 36, 37, 38, 39, 38, 37, 38, 39, 40, 41, 40, 41, 40, 41, 42, 43, 44, 45, 50, 55, 54, 55, 56, 55, 56, 62, 61, 62]]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Convert all_walks to Numpy array: np_aw</span>np_aw <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>all_walks<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot np_aw and show</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np_aw<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Clear the figure</span>plt<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="basics-concepts_files/basics-concepts_119_0.png" alt="png"></p><pre><code>&lt;Figure size 432x288 with 0 Axes&gt;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Transpose np_aw: np_aw_t</span>np_aw_t <span class="token operator">=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>np_aw<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot np_aw_t and show</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np_aw_t<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="basics-concepts_files/basics-concepts_120_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Implement clumsiness</span><span class="token comment" spellcheck="true"># numpy and matplotlib imported, seed set</span><span class="token comment" spellcheck="true"># Simulate random walk 250 times</span>all_walks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    random_walk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        step <span class="token operator">=</span> random_walk<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        dice <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> dice <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>            step <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> step <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> dice <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            step <span class="token operator">=</span> step <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Implement clumsiness</span>        <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span> <span class="token number">0.001</span> <span class="token punctuation">:</span>            step <span class="token operator">=</span> <span class="token number">0</span>        random_walk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>step<span class="token punctuation">)</span>    all_walks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random_walk<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Create and plot np_aw_t</span>np_aw_t <span class="token operator">=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>all_walks<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np_aw_t<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="basics-concepts_files/basics-concepts_121_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Select last row from np_aw_t: ends</span>ends <span class="token operator">=</span> np_aw_t<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Plot histogram of ends, display plot</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>ends<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="basics-concepts_files/basics-concepts_122_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>ends<span class="token operator">></span><span class="token number">60</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.776</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> oswd <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Python Data Science Toolbox (Part 1).ipynb&#39;, &#39;.DS_Store&#39;, &#39;Manipulating DataFrames with pandas.ipynb&#39;, &#39;Importing Data in Python (Part 2).ipynb&#39;, &#39;5. EDA.ipynb&#39;, &#39;4. Merge data.ipynb&#39;, &#39;merge data with pandas.ipynb&#39;, &#39;Cleaning Data in Python.ipynb&#39;, &#39;Intermediate Python for Data Science.ipynb&#39;, &#39;Python Data Science Toolbox (Part 2).ipynb&#39;, &#39;3. Clean data.ipynb&#39;, &#39;2. Import Data.ipynb&#39;, &#39;.ipynb_checkpoints&#39;, &#39;Case about Medals.ipynb&#39;, &#39;Case about policing activities.ipynb&#39;, &#39;1. basics and concepts.ipynb&#39;, &#39;Importing Data in Python (Part 1).ipynb&#39;, &#39;pandas Foundations.ipynb&#39;]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Courses </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> data science </tag>
            
            <tag> concepts </tag>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clustering Heart Disease Patient Data with R</title>
      <link href="/2020/04/27/notebook/"/>
      <url>/2020/04/27/notebook/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Targeting-treatment-for-heart-disease-patients"><a href="#1-Targeting-treatment-for-heart-disease-patients" class="headerlink" title="1. Targeting treatment for heart disease patients"></a>1. Targeting treatment for heart disease patients</h2><p>Clustering algorithms are used to group together items that are similar to one another. There are many industries where it would be beneficial and insightful to use an unsupervised learning algorithm - retailers want to group similar customers for targeted ad campaigns, biologists want to find plants that share similar characteristics, and more. We are going to explore if it would be appropriate to use some clustering algorithms to group medical patients. </p><p><img src="https://assets.datacamp.com/production/project_552/img/images-3.jpeg" alt></p><p>We are going to look at anonymized patients who have been diagnosed with heart disease. Patients with similar characteristics might respond to the same treatments, and doctors would benefit from learning about the outcomes of patients similar to those they are treating. The data we are analyzing comes from the V.A. Medical Center in Long Beach, CA. For more information, see <a href="http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/heart-disease.names" target="_blank" rel="noopener">here</a>, and to download the data visit <a href="https://archive.ics.uci.edu/ml/datasets/heart+Disease" target="_blank" rel="noopener">here</a>. </p><p>Before beginning a project, it is important to get an idea of what the patient data looks like. In addition, the clustering algorithms used below require that the data be numeric, so it is necessary to ensure the patient data doesn't need any transformations. You will also be brushing up on your base R skills for some analysis.</p><pre class="line-numbers language-R"><code class="language-R"># Loading the dataheart_disease = read.csv("datasets/heart_disease_patients.csv")# Print the first ten rows of the data sethead(heart_disease, n=10)# Check that only numeric variableslapply(heart_disease, class)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><caption>A data.frame: 10 x 12</caption><thead>    <tr><th scope="col">id</th><th scope="col">age</th><th scope="col">sex</th><th scope="col">cp</th><th scope="col">trestbps</th><th scope="col">chol</th><th scope="col">fbs</th><th scope="col">restecg</th><th scope="col">thalach</th><th scope="col">exang</th><th scope="col">oldpeak</th><th scope="col">slope</th></tr>    <tr><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;int&gt;</th></tr></thead><tbody>    <tr><td> 1</td><td>63</td><td>1</td><td>1</td><td>145</td><td>233</td><td>1</td><td>2</td><td>150</td><td>0</td><td>2.3</td><td>3</td></tr>    <tr><td> 2</td><td>67</td><td>1</td><td>4</td><td>160</td><td>286</td><td>0</td><td>2</td><td>108</td><td>1</td><td>1.5</td><td>2</td></tr>    <tr><td> 3</td><td>67</td><td>1</td><td>4</td><td>120</td><td>229</td><td>0</td><td>2</td><td>129</td><td>1</td><td>2.6</td><td>2</td></tr>    <tr><td> 4</td><td>37</td><td>1</td><td>3</td><td>130</td><td>250</td><td>0</td><td>0</td><td>187</td><td>0</td><td>3.5</td><td>3</td></tr>    <tr><td> 5</td><td>41</td><td>0</td><td>2</td><td>130</td><td>204</td><td>0</td><td>2</td><td>172</td><td>0</td><td>1.4</td><td>1</td></tr>    <tr><td> 6</td><td>56</td><td>1</td><td>2</td><td>120</td><td>236</td><td>0</td><td>0</td><td>178</td><td>0</td><td>0.8</td><td>1</td></tr>    <tr><td> 7</td><td>62</td><td>0</td><td>4</td><td>140</td><td>268</td><td>0</td><td>2</td><td>160</td><td>0</td><td>3.6</td><td>3</td></tr>    <tr><td> 8</td><td>57</td><td>0</td><td>4</td><td>120</td><td>354</td><td>0</td><td>0</td><td>163</td><td>1</td><td>0.6</td><td>1</td></tr>    <tr><td> 9</td><td>63</td><td>1</td><td>4</td><td>130</td><td>254</td><td>0</td><td>2</td><td>147</td><td>0</td><td>1.4</td><td>2</td></tr>    <tr><td>10</td><td>53</td><td>1</td><td>4</td><td>140</td><td>203</td><td>1</td><td>2</td><td>155</td><td>1</td><td>3.1</td><td>3</td></tr></tbody></table><dl>    <dt>$id</dt>        <dd>'integer'</dd>    <dt>$age</dt>        <dd>'integer'</dd>    <dt>$sex</dt>        <dd>'integer'</dd>    <dt>$cp</dt>        <dd>'integer'</dd>    <dt>$trestbps</dt>        <dd>'integer'</dd>    <dt>$chol</dt>        <dd>'integer'</dd>    <dt>$fbs</dt>        <dd>'integer'</dd>    <dt>$restecg</dt>        <dd>'integer'</dd>    <dt>$thalach</dt>        <dd>'integer'</dd>    <dt>$exang</dt>        <dd>'integer'</dd>    <dt>$oldpeak</dt>        <dd>'numeric'</dd>    <dt>$slope</dt>        <dd>'integer'</dd></dl><h2 id="2-Quantifying-patient-differences"><a href="#2-Quantifying-patient-differences" class="headerlink" title="2. Quantifying patient differences"></a>2. Quantifying patient differences</h2><p>It is important to conduct some exploratory data analysis to familiarize ourselves with the data before clustering. This will help us learn more about the variables and make an informed decision about whether we should scale the data. Because k-means and hierarchical clustering measures similarity between points using a distance formula, it can place extra emphasis on certain variables that have a larger scale and thus larger differences between points.</p><p>Exploratory data analysis helps us to understand the characteristics of the patients in the data. We need to get an idea of the value ranges of the variables and their distributions. This will also be helpful when we evaluate the clusters of patients from the algorithms. Are there more patients of one gender? What might an outlier look like?</p><pre class="line-numbers language-R"><code class="language-R"># Evidence that the data should be scaled?summary(heart_disease)# Remove idheart_disease = heart_disease[ , !(names(heart_disease) %in% c("id"))]# Scaling data and saving as a data framescaled = scale(heart_disease)# What does data look like now?summary(scaled)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>       id             age             sex               cp        Min.   :  1.0   Min.   :29.00   Min.   :0.0000   Min.   :1.000   1st Qu.: 76.5   1st Qu.:48.00   1st Qu.:0.0000   1st Qu.:3.000   Median :152.0   Median :56.00   Median :1.0000   Median :3.000   Mean   :152.0   Mean   :54.44   Mean   :0.6799   Mean   :3.158   3rd Qu.:227.5   3rd Qu.:61.00   3rd Qu.:1.0000   3rd Qu.:4.000   Max.   :303.0   Max.   :77.00   Max.   :1.0000   Max.   :4.000      trestbps          chol            fbs            restecg       Min.   : 94.0   Min.   :126.0   Min.   :0.0000   Min.   :0.0000   1st Qu.:120.0   1st Qu.:211.0   1st Qu.:0.0000   1st Qu.:0.0000   Median :130.0   Median :241.0   Median :0.0000   Median :1.0000   Mean   :131.7   Mean   :246.7   Mean   :0.1485   Mean   :0.9901   3rd Qu.:140.0   3rd Qu.:275.0   3rd Qu.:0.0000   3rd Qu.:2.0000   Max.   :200.0   Max.   :564.0   Max.   :1.0000   Max.   :2.0000      thalach          exang           oldpeak         slope       Min.   : 71.0   Min.   :0.0000   Min.   :0.00   Min.   :1.000   1st Qu.:133.5   1st Qu.:0.0000   1st Qu.:0.00   1st Qu.:1.000   Median :153.0   Median :0.0000   Median :0.80   Median :2.000   Mean   :149.6   Mean   :0.3267   Mean   :1.04   Mean   :1.601   3rd Qu.:166.0   3rd Qu.:1.0000   3rd Qu.:1.60   3rd Qu.:2.000   Max.   :202.0   Max.   :1.0000   Max.   :6.20   Max.   :3.000        age               sex                cp             trestbps        Min.   :-2.8145   Min.   :-1.4549   Min.   :-2.2481   Min.   :-2.14149   1st Qu.:-0.7124   1st Qu.:-1.4549   1st Qu.:-0.1650   1st Qu.:-0.66420   Median : 0.1727   Median : 0.6851   Median :-0.1650   Median :-0.09601   Mean   : 0.0000   Mean   : 0.0000   Mean   : 0.0000   Mean   : 0.00000   3rd Qu.: 0.7259   3rd Qu.: 0.6851   3rd Qu.: 0.8765   3rd Qu.: 0.47218   Max.   : 2.4961   Max.   : 0.6851   Max.   : 0.8765   Max.   : 3.88132        chol              fbs             restecg             thalach        Min.   :-2.3310   Min.   :-0.4169   Min.   :-0.995103   Min.   :-3.4364   1st Qu.:-0.6894   1st Qu.:-0.4169   1st Qu.:-0.995103   1st Qu.:-0.7041   Median :-0.1100   Median :-0.4169   Median : 0.009951   Median : 0.1483   Mean   : 0.0000   Mean   : 0.0000   Mean   : 0.000000   Mean   : 0.0000   3rd Qu.: 0.5467   3rd Qu.:-0.4169   3rd Qu.: 1.015005   3rd Qu.: 0.7166   Max.   : 6.1283   Max.   : 2.3905   Max.   : 1.015005   Max.   : 2.2904       exang            oldpeak            slope         Min.   :-0.6955   Min.   :-0.8954   Min.   :-0.9747   1st Qu.:-0.6955   1st Qu.:-0.8954   1st Qu.:-0.9747   Median :-0.6955   Median :-0.2064   Median : 0.6480   Mean   : 0.0000   Mean   : 0.0000   Mean   : 0.0000   3rd Qu.: 1.4331   3rd Qu.: 0.4827   3rd Qu.: 0.6480   Max.   : 1.4331   Max.   : 4.4445   Max.   : 2.2708  </code></pre><h2 id="3-Let’s-start-grouping-patients"><a href="#3-Let’s-start-grouping-patients" class="headerlink" title="3. Let’s start grouping patients"></a>3. Let’s start grouping patients</h2><p>Once we've figured out if we need to modify the data and made any necessary changes, we can now start the clustering process. For the k-means algorithm, it is necessary to select the number of clusters in advance.</p><p>It is also important to make sure that your results are reproducible when conducting a statistical analysis. This means that when someone runs your code on the same data, they will get the same results as you reported. Therefore, if you're conducting an analysis that has a random aspect, it is necessary to set a seed to ensure reproducibility.</p><p>Reproducibility is especially important since doctors will potentially be using our results to treat patients. It is vital that another analyst can see where the groups come from and be able to verify the results. </p><pre class="line-numbers language-R"><code class="language-R"># Set the seed so that results are reproducibleseed_val = 10set.seed(seed_val, kind = "Mersenne-Twister", normal.kind = "Inversion")# Select a number of clustersk = 5# Run the k-means algorithmsfirst_clust = kmeans(scaled, centers = k, nstart = 1)# How many patients are in each group?first_clust$size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol class="list-inline">    <li>24</li>    <li>53</li>    <li>87</li>    <li>72</li>    <li>67</li></ol><h2 id="4-Another-round-of-k-means"><a href="#4-Another-round-of-k-means" class="headerlink" title="4. Another round of k-means"></a>4. Another round of k-means</h2><p>Because the k-means algorithm initially selects the cluster centers by randomly selecting points, different iterations of the algorithm can result in different clusters being created. If the algorithm is truly grouping together similar observations (as opposed to clustering noise), then cluster assignments will be somewhat robust between different iterations of the algorithm. </p><p>With regards to the heart disease data, this would mean that the same patients would be grouped together even when the algorithm is initialized at different random points. If patients are not in similar clusters with various algorithm runs, then the clustering method isn't picking up on meaningful relationships between patients. </p><p>We're going to explore how the patients are grouped together with another iteration of the k-means algorithm. We will then be able to compare the resulting groups of patients. </p><pre class="line-numbers language-R"><code class="language-R"># Set the seedseed_val = 38set.seed(seed_val, kind = "Mersenne-Twister", normal.kind = "Inversion")# Run the k-means algorithmsk = 5second_clust = kmeans(scaled, center=k, nstart=1)# How many patients are in each group?second_clust$size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol class="list-inline">    <li>51</li>    <li>48</li>    <li>42</li>    <li>67</li>    <li>95</li></ol><pre class="line-numbers language-R"><code class="language-R">second_clust<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>K-means clustering with 5 clusters of sizes 51, 48, 42, 67, 95Cluster means:         age         sex          cp    trestbps        chol        fbs1  0.5892201 -0.99332950 -0.22626141  0.29392331  0.74931318 -0.36189722  0.6221668  0.01633219  0.05199058  0.08154839 -0.11518458 -0.41694483  0.2938813  0.12460389 -0.09059989  0.48164882 -0.04695460  2.39048354  0.1793139  0.26985337  0.76771887  0.01677897  0.07078713 -0.37504295 -0.8870661  0.27960337 -0.40619142 -0.42376687 -0.37322902 -0.3873929     restecg     thalach       exang     oldpeak      slope1  0.2267274  0.35060936 -0.52853177 -0.58127000 -0.65654732  0.3030918 -0.47190204 -0.65113441  0.79127477  0.81708093  0.1535302  0.01404637  0.06473083  0.02946025  0.14575194  0.1149567 -0.89955878  1.43311039  0.62405541  0.64804125 -0.4238092  0.67842854 -0.42660546 -0.54089960 -0.5818559Clustering vector:  [1] 3 4 4 2 5 5 2 1 2 3 2 1 3 5 3 5 5 5 1 5 2 3 2 2 4 5 1 2 5 4 1 3 1 2 5 5 4 [38] 4 4 3 2 5 1 3 1 2 5 2 1 3 5 5 5 5 4 4 5 5 2 5 4 4 4 3 2 4 2 5 4 2 1 3 4 1 [75] 5 1 4 1 5 4 4 1 5 3 5 5 5 1 1 1 2 2 2 5 1 5 4 2 5 5 5 5 1 3 2 5 5 2 4 5 4[112] 3 5 3 2 5 3 5 3 2 3 2 4 4 3 5 3 4 5 1 2 5 5 5 5 1 4 2 4 3 5 1 3 4 4 5 3 5[149] 5 1 3 2 1 4 4 2 4 1 2 1 5 1 2 2 3 5 5 3 5 5 4 4 4 1 2 4 3 4 5 3 5 4 5 2 1[186] 1 3 4 1 2 5 4 3 3 2 4 3 4 5 1 1 1 3 1 5 4 4 4 5 4 5 5 5 3 5 2 5 4 2 1 5 1[223] 5 4 4 5 5 1 4 4 1 4 5 1 1 4 4 5 1 5 5 5 1 2 3 2 5 4 5 3 4 2 4 1 5 5 1 2 1[260] 5 5 3 1 5 4 4 3 3 5 5 4 2 4 2 5 2 1 5 1 2 4 5 4 5 5 2 3 5 5 5 2 1 4 4 4 5[297] 3 4 5 3 4 1 5Within cluster sum of squares by cluster:[1] 368.7387 378.1541 398.0430 458.2080 580.3240 (between_SS / total_SS =  34.3 %)Available components:[1] &quot;cluster&quot;      &quot;centers&quot;      &quot;totss&quot;        &quot;withinss&quot;     &quot;tot.withinss&quot;[6] &quot;betweenss&quot;    &quot;size&quot;         &quot;iter&quot;         &quot;ifault&quot;      </code></pre><h2 id="5-Comparing-patient-clusters"><a href="#5-Comparing-patient-clusters" class="headerlink" title="5. Comparing patient clusters"></a>5. Comparing patient clusters</h2><p>It is important that the clusters resulting from the k-means algorithm are stable. Even though the algorithm begins by randomly initializing the cluster centers, if the k-means algorithm is the right choice for the data, then different initializations of the algorithm will result in similar clusters.</p><p>The clusters from different iterations may not be exactly the same, but the clusters should be roughly the same size and have similar distributions of variables. If there is a lot of change in clusters between different iterations of the algorithm, then k-means clustering is not a good choice for the data. </p><p>It is not possible to validate that the clusters obtained from an algorithm are ground truth are accurate since there is no true labeling for patients. Thus, it is necessary to examine how the clusters change between different iterations of the algorithm. We're going to use some visualizations to get an idea of the cluster stabilities. That way we can see how certain patient characteristics may have been used to group patients together.</p><pre class="line-numbers language-R"><code class="language-R"># Adding cluster assignments to the dataheart_disease["first_clust"] = first_clust$clusterheart_disease["second_clust"] = second_clust$cluster# Load ggplot2library(ggplot2)# Creating the plots of age and chol for the first clustering algorithmplot_one = ggplot(heart_disease, aes(x =age, y = chol, color = as.factor(first_clust))) +   geom_point()plot_one # Creating the plots of age and chol for the second clustering algorithmplot_two = ggplot(heart_disease, aes(x = age, y = chol, color = as.factor(second_clust))) +   geom_point()plot_two<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="notebook_10_0.png" alt></p><p><img src="notebook_10_1.png" alt="testing"></p><h2 id="6-Hierarchical-clustering-another-clustering-approach"><a href="#6-Hierarchical-clustering-another-clustering-approach" class="headerlink" title="6. Hierarchical clustering: another clustering approach"></a>6. Hierarchical clustering: another clustering approach</h2><p>An alternative to k-means clustering is hierarchical clustering. This method works well when the data has a nested structure. It is possible that the data from heart disease patients follows this type of structure. For example, if men are more likely to exhibit certain characteristics, those characteristics might be nested inside the gender variable. Hierarchical clustering also does not require the number of clusters to be selected prior to running the algorithm. </p><p>Clusters can be selected by using the dendrogram. The dendrogram allows one to see how similar observations are to one another and are useful in selecting the number of clusters to group the data. It is now time for us to see how hierarchical clustering groups the data. </p><pre class="line-numbers language-R"><code class="language-R"># Executing hierarchical clustering with complete linkagehier_clust_1 = hclust(dist(scaled), method= "complete")# Printing the dendrogramplot(hier_clust_1)# Getting cluster assignments based on number of selected clustershc_1_assign <- cutree(hier_clust_1, 5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="notebook_12_0.png" alt></p><h2 id="7-Hierarchical-clustering-round-two"><a href="#7-Hierarchical-clustering-round-two" class="headerlink" title="7. Hierarchical clustering round two"></a>7. Hierarchical clustering round two</h2><p>In hierarchical clustering, there are multiple ways to measure the dissimilarity between clusters of observations. Complete linkage records the largest dissimilarity between any two points in the two clusters being compared. On the other hand, single linkage is the smallest dissimilarity between any two points in the clusters. Different linkages will result in different clusters being formed. </p><p>We want to explore different algorithms to group our heart disease patients. The best way to measure dissimilarity between patients could be to look at the smallest difference between patients and minimize that difference when grouping together clusters. It is always a good idea to explore different dissimilarity measures. Let's implement hierarchical clustering using a new linkage function. </p><pre class="line-numbers language-R"><code class="language-R"># Executing hierarchical clustering with single linkagehier_clust_2 = hclust(dist(scaled), method = "single")# Printing the dendrogramplot(hier_clust_2)# Getting cluster assignments based on number of selected clustershc_2_assign <- cutree(hier_clust_2, 5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="notebook_14_0.png" alt></p><h2 id="8-Comparing-clustering-results"><a href="#8-Comparing-clustering-results" class="headerlink" title="8. Comparing clustering results"></a>8. Comparing clustering results</h2><p>The doctors are interested in grouping similar patients together in order to determine appropriate treatments. Therefore, they want to have clusters with more than a few patients to see different treatment options. While it is possible for a patient to be in a cluster by themselves, this means that the treatment they received might not be recommended for someone else in the group. </p><p>As with the k-means algorithm, the way to evaluate the clusters is to investigate which patients are being grouped together. Are there patterns evident in the cluster assignments or do they seem to be groups of noise? We're going to examine the clusters resulting from the two hierarchical algorithms. </p><pre class="line-numbers language-R"><code class="language-R"># Adding assignments of chosen hierarchical linkageheart_disease['hc_clust'] = hc_1_assign# Remove 'sex', 'first_clust', and 'second_clust' variableshd_simple = heart_disease[, !(names(heart_disease) %in% c("sex", "first_clust", "second_clust"))]# Getting mean and standard deviation summary statisticsclust_summary = do.call(data.frame, aggregate(. ~ hc_clust, data = hd_simple, function(x) c(avg = mean(x), sd = sd(x))))clust_summary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><caption>A data.frame: 5 x 21</caption><thead>    <tr><th scope="col">hc_clust</th><th scope="col">age.avg</th><th scope="col">age.sd</th><th scope="col">cp.avg</th><th scope="col">cp.sd</th><th scope="col">trestbps.avg</th><th scope="col">trestbps.sd</th><th scope="col">chol.avg</th><th scope="col">chol.sd</th><th scope="col">fbs.avg</th><th scope="col">...</th><th scope="col">restecg.avg</th><th scope="col">restecg.sd</th><th scope="col">thalach.avg</th><th scope="col">thalach.sd</th><th scope="col">exang.avg</th><th scope="col">exang.sd</th><th scope="col">oldpeak.avg</th><th scope="col">oldpeak.sd</th><th scope="col">slope.avg</th><th scope="col">slope.sd</th></tr>    <tr><th scope="col">&lt;int&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">...</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th></tr></thead><tbody>    <tr><td>1</td><td>51.41667</td><td>8.540979</td><td>2.783333</td><td>0.9470625</td><td>129.1389</td><td>15.93800</td><td>239.8722</td><td>42.29228</td><td>0.1222222</td><td>...</td><td>0.8444444</td><td>0.9905826</td><td>161.5722</td><td>15.779214</td><td>0.07777778</td><td>0.2685686</td><td>0.555000</td><td>0.7847196</td><td>1.388889</td><td>0.5730336</td></tr>    <tr><td>2</td><td>58.11111</td><td>7.754246</td><td>3.763889</td><td>0.6165112</td><td>130.0417</td><td>13.90657</td><td>253.2222</td><td>49.74476</td><td>0.1805556</td><td>...</td><td>1.4027778</td><td>0.9140488</td><td>135.5417</td><td>17.991342</td><td>0.81944444</td><td>0.3873488</td><td>1.451389</td><td>1.0804268</td><td>1.750000</td><td>0.5240686</td></tr>    <tr><td>3</td><td>61.00000</td><td>3.908034</td><td>3.916667</td><td>0.2886751</td><td>168.5000</td><td>17.45904</td><td>284.9167</td><td>53.00336</td><td>0.3333333</td><td>...</td><td>1.2500000</td><td>0.9653073</td><td>147.7500</td><td>13.157266</td><td>0.75000000</td><td>0.4522670</td><td>2.316667</td><td>1.4708274</td><td>2.166667</td><td>0.5773503</td></tr>    <tr><td>4</td><td>59.00000</td><td>9.203580</td><td>3.571429</td><td>0.8501112</td><td>134.7714</td><td>18.64070</td><td>233.8571</td><td>49.67136</td><td>0.1428571</td><td>...</td><td>0.6857143</td><td>0.9321521</td><td>116.8857</td><td>17.842071</td><td>0.48571429</td><td>0.5070926</td><td>2.240000</td><td>1.3856831</td><td>2.200000</td><td>0.4058397</td></tr>    <tr><td>5</td><td>64.75000</td><td>2.061553</td><td>3.250000</td><td>0.5000000</td><td>138.7500</td><td>18.42779</td><td>433.7500</td><td>89.93470</td><td>0.2500000</td><td>...</td><td>2.0000000</td><td>0.0000000</td><td>156.2500</td><td> 3.774917</td><td>0.00000000</td><td>0.0000000</td><td>1.100000</td><td>0.3829708</td><td>1.500000</td><td>0.5773503</td></tr></tbody></table><h2 id="9-Visualizing-the-cluster-contents"><a href="#9-Visualizing-the-cluster-contents" class="headerlink" title="9. Visualizing the cluster contents"></a>9. Visualizing the cluster contents</h2><p>In addition to looking at the distributions of variables in each of the hierarchical clustering runs, we will make visualizations to evaluate the algorithms. Even though the data has more than two dimensions, we can get an idea of how the data clusters by looking at a scatter plot of two variables. We want to look for patterns that appear in the data and see what patients get clustered together. </p><pre class="line-numbers language-R"><code class="language-R"># Plotting age and cholplot_one = ggplot(heart_disease, aes(x = age, y = chol, color = as.factor(hc_clust))) +   geom_point()plot_one # Plotting oldpeak and trestbpsplot_two = ggplot(heart_disease, aes(x = oldpeak, y = trestbps, color = as.factor(hc_clust))) +   geom_point()plot_two<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="notebook_18_0.png" alt></p><p><img src="/notebook/notebook_18_1.png" alt></p><h2 id="10-Conclusion"><a href="#10-Conclusion" class="headerlink" title="10. Conclusion"></a>10. Conclusion</h2><p>Now that we've tried out multiple clustering algorithms, it is necessary to determine if we think any of them will work for clustering our patients. For the k-means algorithm, it is imperative that similar clusters are produced for each iteration of the algorithm. We want to make sure that the algorithm is clustering signal as opposed to noise. </p><p>For the sake of the doctors, we also want to have multiple patients in each group so they can compare treatments. We only did some preliminary work to explore the performance of the algorithms, and it is necessary to explore further before making a recomendation. Based on the above analysis are there any algorithms that you would want to investigate further to group patients? </p><p>Remember that it is important the k-mean algorithm seems stable when running multiple iterations. This means that we would see similar groups of patients showing up in the plots from the different iterations of the algorithm. For the hierarchical clustering, we need a method that puts a balanced number of patients in each group. </p><pre class="line-numbers language-R"><code class="language-R"># Add TRUE if the algorithm shows promise, add FALSE if it does notexplore_kmeans = TRUEexplore_hierarch_complete = FALSEexplore_hierarch_single = FALSE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Clustering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data science </tag>
            
            <tag> machine learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use Hexo and deploy to GitHub Pages</title>
      <link href="/2020/04/27/hexo-use/"/>
      <url>/2020/04/27/hexo-use/</url>
      
        <content type="html"><![CDATA[<h2 id="How-to-use-Hexo-and-deploy-to-GitHub-Pages"><a href="#How-to-use-Hexo-and-deploy-to-GitHub-Pages" class="headerlink" title="How to use Hexo and deploy to GitHub Pages"></a>How to use Hexo and deploy to GitHub Pages</h2><ul><li><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></li><li><a href="https://hexo.io/docs/" target="_blank" rel="noopener">https://hexo.io/docs/</a></li></ul><h3 id="1-Install-Hexo"><a href="#1-Install-Hexo" class="headerlink" title="1. Install Hexo"></a>1. Install Hexo</h3><pre><code>$ sudo npm install -g hexo-cli$ hexo -vhexo-cli: 0.1.9os: Darwin 14.3.0 darwin x64http_parser: 2.3node: 0.12.7v8: 3.28.71.19uv: 1.6.1zlib: 1.2.8modules: 14openssl: 1.0.1p</code></pre><h3 id="2-Create-a-project-for-your-GitHub-Pages"><a href="#2-Create-a-project-for-your-GitHub-Pages" class="headerlink" title="2. Create a project for your GitHub Pages"></a>2. Create a project for your GitHub Pages</h3><pre><code>$ hexo init yt8yt.github.ioINFO  Copying data to ~/***/yt8yt.github.ioINFO  You are almost done! Don&#39;t forget to run &#39;npm install&#39; before you start blogging with Hexo!$ cd yt8yt.github.io$ npm install</code></pre><h3 id="3-Run-a-test-server-for-your-page-on-Mac"><a href="#3-Run-a-test-server-for-your-page-on-Mac" class="headerlink" title="3. Run a test server for your page on Mac"></a>3. Run a test server for your page on Mac</h3><pre><code>$ hexo serverINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></pre><h3 id="4-Set-information-for-your-new-blog"><a href="#4-Set-information-for-your-new-blog" class="headerlink" title="4. Set information for your new blog"></a>4. Set information for your new blog</h3><p><a href="https://hexo.io/docs/configuration.html" target="_blank" rel="noopener">https://hexo.io/docs/configuration.html</a></p><pre><code>$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# Sitetitle: yt8yt&#39;s notesubtitle:description: yt8yt&#39;s personal blogauthor: yt8ytlanguage:timezone: Japan# URL## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;url: http://yt8yt.github.io/root: /permalink: :year/:month/:day/:title/permalink_defaults:</code></pre><h3 id="5-Set-information-to-use-Git"><a href="#5-Set-information-to-use-Git" class="headerlink" title="5. Set information to use Git"></a>5. Set information to use Git</h3><p><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">https://github.com/hexojs/hexo-deployer-git</a></p><pre><code>$ npm install hexo-deployer-git --save$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:yt8yt/yt8yt.github.io.git  branch: master</code></pre><h3 id="6-Set-“watch”-before-starting-your-work"><a href="#6-Set-“watch”-before-starting-your-work" class="headerlink" title="6. Set “watch” before starting your work"></a>6. Set “watch” before starting your work</h3><p>“watch” command can monitor your files.<br><a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">https://hexo.io/docs/generating.html</a></p><pre><code>$ hexo generate --watch</code></pre><h3 id="7-Create-a-new-post-file"><a href="#7-Create-a-new-post-file" class="headerlink" title="7. Create a new post file"></a>7. Create a new post file</h3><pre><code>$ hexo new first-postINFO  Created: ~/***/yt8yt.github.io/source/_posts/first-post.md</code></pre><h3 id="8-Edit-the-above-file-with-Markdown-or-Hexo’s-Helper"><a href="#8-Edit-the-above-file-with-Markdown-or-Hexo’s-Helper" class="headerlink" title="8. Edit the above file with Markdown or Hexo’s Helper"></a>8. Edit the above file with Markdown or Hexo’s Helper</h3><p>Hexo’s Helper<br><a href="https://hexo.io/docs/helpers.html" target="_blank" rel="noopener">https://hexo.io/docs/helpers.html</a><br>I use Atom with “shift + control + m” when I use Markdown :-)<br><a href="https://atom.io/" target="_blank" rel="noopener">https://atom.io/</a></p><h3 id="9-Delete-“source-posts-hello-world-md”"><a href="#9-Delete-“source-posts-hello-world-md”" class="headerlink" title="9. Delete “source/_posts/hello-world.md”"></a>9. Delete “source/_posts/hello-world.md”</h3><p>It’s not necessary to deploy.</p><h3 id="10-Deploy-your-new-blog"><a href="#10-Deploy-your-new-blog" class="headerlink" title="10. Deploy your new blog!!"></a>10. Deploy your new blog!!</h3><p><a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html</a></p><pre><code>$ hexo clean$ hexo deploy</code></pre><p>After writting the above command, you can see your new blog on GitHub Pages.<br>http://<strong>**</strong>.github.io/</p><h3 id="11-Change-your-blog-theme"><a href="#11-Change-your-blog-theme" class="headerlink" title="11. Change your blog theme"></a>11. Change your blog theme</h3><p><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">https://github.com/hexojs/hexo/wiki/Themes</a></p><pre><code>For instance, How to use the following theme.https://hexo.io/hexo-theme-light/## Install it$ cd yt8yt.github.io$ git clone git://github.com/tommy351/hexo-theme-light.git themes/light## Update the above files$ themes/light$ git pull## Set information to use the theme$ cd yt8yt.github.io$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: light</code></pre><h3 id="12-Create-a-new-page-file"><a href="#12-Create-a-new-page-file" class="headerlink" title="12. Create a new page file"></a>12. Create a new page file</h3><p><a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/docs/writing.html</a></p><pre><code>$ hexo new page aboutmeINFO  Created: ~/***/yt8yt.github.io/source/aboutme/index.md$ cd source/aboutme/$ vi index.md</code></pre><h3 id="13-Use-“Read-More”"><a href="#13-Use-“Read-More”" class="headerlink" title="13. Use “Read More”"></a>13. Use “Read More”</h3><p>Write <code>&lt;!-- more --&gt;</code> in your articles.  </p><h3 id="14-Use-Plugins"><a href="#14-Use-Plugins" class="headerlink" title="14. Use Plugins"></a>14. Use Plugins</h3><p><a href="https://github.com/hexojs/hexo/wiki/Plugins" target="_blank" rel="noopener">https://github.com/hexojs/hexo/wiki/Plugins</a></p>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github pages </tag>
            
            <tag> web sites </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="/2020/02/16/sort-algorithms/"/>
      <url>/2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【算法码上来】，每日算法干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组" target="_blank" rel="noopener">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><blockquote><p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p></blockquote><p><img src="1.png" alt="十大经典排序算法性质汇总"><br><img src="1.png" alt="十大经典排序算法性质汇总"></p><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
