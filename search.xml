<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Introduction to R from data science perspective</title>
      <link href="/2020/04/28/1-r-intro-cn/"/>
      <url>/2020/04/28/1-r-intro-cn/</url>
      
        <content type="html"><![CDATA[<h1 id="R-Crash-Course-Introduction"><a href="#R-Crash-Course-Introduction" class="headerlink" title="R Crash Course - Introduction"></a>R Crash Course - Introduction</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>要愉快地使用R, 我们需要走两步：</p><ul><li><p>到这个网站 CRAN（Comprehensive R Archive Network）<a href="http://www.r-project.org/" target="_blank" rel="noopener">http://www.r-project.org/</a> ，下载R程序。</p><ul><li>Linux、Mac OS X和Windows都有相应的版本，根据你的电脑系统，选择对应的安装包，下载安装即可。</li><li>如果你找不到程序位置，那么请看这里<a href="http://ftp.ctex.org/mirrors/CRAN/" target="_blank" rel="noopener">http://ftp.ctex.org/mirrors/CRAN/</a></li></ul></li><li><p>到Rstudio官网<a href="http://www.rstudio.com/ide/download/" target="_blank" rel="noopener">http://www.rstudio.com/ide/download/</a>，下载Rstudio程序，选择desktop那种，免费的就够用了。</p><ul><li>一般来说，我们不在R里面直接操作，在安装R以后，我们在安装Rstudio，在Rstudio里完成我们所有的工作。</li><li>R 与 RStudio 是什么关系呢？你可以简单的理解为，RStudio 是话筒，而 R 则是沟通所用的语言。</li></ul></li></ul><h2 id="界面熟悉和基本操作"><a href="#界面熟悉和基本操作" class="headerlink" title="界面熟悉和基本操作"></a>界面熟悉和基本操作</h2><p><img src="https://www.dropbox.com/s/cy1ls5p6f4qqcya/rstudio.png?dl=1" alt></p><p>R是一种区分大小写的解释型语言。你可以在命令提示符（&gt;）后每次输入并执行一条命令，或者一次性执行写在脚本文件中的一组命令。R中有多种数据类型，包括向量、矩阵、数据框（与数据集类似）以及列表（各种对象的集合）。</p><p>可以当作最基本的计算器来使用。</p><h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><ul><li>加: <code>+</code></li><li>减: <code>-</code></li><li>乘: <code>*</code></li><li>除: <code>/</code></li><li>乘方: <code>^</code></li><li>均值：<code>mean()</code></li><li>方差：<code>var()</code></li><li>标准差：<code>sd()</code></li><li>中位数：<code>median()</code></li><li>百分位数: <code>quantile()</code></li></ul><pre class="line-numbers language-R"><code class="language-R">7+77-77*77/77^2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>14</p><p>0</p><p>49</p><p>1</p><p>49</p><pre class="line-numbers language-R"><code class="language-R">sqrt(7)mean(mtcars$mpg)var(mtcars$mpg)sd(mtcars$mpg)mode(mtcars$mpg)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.64575131106459</p><p>20.090625</p><p>36.3241028225806</p><p>6.0269480520891</p><p>‘numeric’</p><pre class="line-numbers language-R"><code class="language-R">quantile(mtcars$mpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><dl class="dl-horizontal">    <dt>0%</dt>        <dd>10.4</dd>    <dt>25%</dt>        <dd>15.425</dd>    <dt>50%</dt>        <dd>19.2</dd>    <dt>75%</dt>        <dd>22.8</dd>    <dt>100%</dt>        <dd>33.9</dd></dl><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>R使用&lt;-作为赋值符号。</p><ul><li>简单说来，赋值就是给一些东西取个名字，这样以后方便叫它。</li><li>然后你只需要输入my_var，R Console就将42输出来：</li><li>是这么操作的：</li></ul><pre class="line-numbers language-R"><code class="language-R">lucky_numbers <- c(7, 77)lucky_numbers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol class="list-inline">    <li>7</li>    <li>77</li></ol><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>一个对象可以是任何能被赋值的东西。对于R来说，对象可以是任何东西（数据、函数、图形、分析结果，等等）</p><h2 id="c-这个函数"><a href="#c-这个函数" class="headerlink" title="c() 这个函数"></a>c() 这个函数</h2><p>我们也可以使用c() 这个函数 function（c 意指是 combine）来赋值，它把多个对象放到一起，组成向量。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>注释由符号#开头。在#之后出现的任何文本都会被R忽略而不运行。</li></ul><pre class="line-numbers language-R"><code class="language-R"># 2+3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="帮助查询"><a href="#帮助查询" class="headerlink" title="帮助查询"></a>帮助查询</h2><ul><li>输入?c 或者help(c)，在RStudio 右下角的介面 召唤出帮助文件 Help。</li></ul><h2 id="函数包"><a href="#函数包" class="headerlink" title="函数包"></a>函数包</h2><ul><li><p>上面的c()是我们遇到的第一个函数，我们以后还会遇到许许多多的函数。而功能包则是函数的有机组合，以实现更丰富的功能。</p></li><li><p>R自带了一系列默认包（包括base、datasets、utils、grDevices、graphics、stats以及methods），它们提供了种类繁多的默认函数和数据集。</p></li><li><p>其他包则按需要调用：先安装，再载入，然后就可以使用啦！</p></li><li><p>安装函数包的函数 <code>install.packages(&quot;dplyr&quot;)</code></p></li><li><p>载入调用函数包 <code>install.packages(&quot;dplyr&quot;)</code></p></li></ul><pre class="line-numbers language-R"><code class="language-R">library(dplyr)library(ggplot2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Attaching package: ‘dplyr’The following objects are masked from ‘package:stats’:    filter, lagThe following objects are masked from ‘package:base’:    intersect, setdiff, setequal, unionRegistered S3 methods overwritten by &#39;ggplot2&#39;:  method         from   [.quosures     rlang  c.quosures     rlang  print.quosures rlang</code></pre><ul><li><p>一个包仅需安装一次。但和其他软件类似，包经常被其作者更新。使用命令<code>update.packages()</code>可以更新已经安装的包。</p></li><li><p>然后我们就可以愉快的使用包了，具体来说里面的各种函数和数据。包中往往提供了演示性的小型数据集和示例代码，能够让我们尝试这些新功能。</p></li><li><p>使用 <code>help(package=&quot;package_name&quot;)</code>可以查看某个包的简短描述以及包中的函数名称和数据集名称的列表。使用函数<code>help()</code>可以查看其中任意函数或数据集的更多细节。</p></li></ul><h2 id="查看路径和设置路径"><a href="#查看路径和设置路径" class="headerlink" title="查看路径和设置路径"></a>查看路径和设置路径</h2><p>路径（工作路径）是我们读取数据和存贮结果的地方。</p><p>在自己的RStuido的 concole 输入：<br><code>getwd()</code> 查看自己的当前路径。<br><code>setwd(yourpath)</code> 设置想要的路径。</p><p>或者使用RStudio右下方,Files这个tab里的齿轮来查看和更改。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p>数值型 numerics (1, 2.5)</p></li><li><p>逻辑判断 logical (TRUE or FALSE)</p></li><li><p>字符型 characters</p></li><li><p>因子 factors</p></li></ul><pre class="line-numbers language-R"><code class="language-R"># Change my_numeric to be 42my_numeric <- 42# Change my_character to be "universe"my_character <- "universe"# Change my_logical to be FALSEmy_logical <- FALSE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-class-函数判断数据类型"><a href="#使用-class-函数判断数据类型" class="headerlink" title="使用 class() 函数判断数据类型"></a>使用 <code>class()</code> 函数判断数据类型</h3><pre class="line-numbers language-R"><code class="language-R"># Declare variables of different types:my_numeric <- 42my_character <- "universe"my_logical <- FALSEclass(my_numeric)class(my_character)class(my_logical)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>‘numeric’</p><p>‘character’</p><p>‘logical’</p><h2 id="因子-factor"><a href="#因子-factor" class="headerlink" title="因子 factor"></a>因子 factor</h2><ul><li><p>因子 factor又叫分类变量，有两种：名义型、有序型。</p><ul><li>名义型，例如，学生的名字，它们之间是没有顺序的。</li><li>有序型，例如，好评，中评，差评，它们之间有顺序关系，但是没有数量关系，得不出来不同级别之间的差异具体是多少。</li></ul></li><li><p>函数factor()以一个整数向量的形式存储类别值，整数的取值范围是[1…k]（其中 k 是名义型变量中唯一值的个数），同时一个由字符串（原始值）组成的内部向量将映射到这些整数上。</p></li></ul><p>是不是有点晕，不着急，我们看点例子：</p><pre class="line-numbers language-R"><code class="language-R">excellence<- c("excellent", "bad", "good", "okay", "bad")excellence<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol class="list-inline">    <li>'excellent'</li>    <li>'bad'</li>    <li>'good'</li>    <li>'okay'</li>    <li>'bad'</li></ol><pre class="line-numbers language-R"><code class="language-R">excellence<- factor(excellence)excellence<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol class="list-inline">    <li>excellent</li>    <li>bad</li>    <li>good</li>    <li>okay</li>    <li>bad</li></ol><details>    <summary style="display:list-item;cursor:pointer">        <strong>Levels</strong>:    </summary>    <ol class="list-inline">        <li>'bad'</li>        <li>'excellent'</li>        <li>'good'</li>        <li>'okay'</li>    </ol></details><pre class="line-numbers language-R"><code class="language-R">excellence <- factor(excellence, order=TRUE,                     levels=c("bad", "okay","good","excellent"))excellence<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol class="list-inline">    <li>excellent</li>    <li>bad</li>    <li>good</li>    <li>okay</li>    <li>bad</li></ol><details>    <summary style="display:list-item;cursor:pointer">        <strong>Levels</strong>:    </summary>    <ol class="list-inline">        <li>'bad'</li>        <li>'okay'</li>        <li>'good'</li>        <li>'excellent'</li>    </ol></details><p>这里我们成功的把字符型变量excellence，先转换成了无序因子变量，再转换成了有顺序的因子变量。</p><ul><li>数值型变量可以用levels和labels参数来编码成因子。如果男性被编码成1，女性被编码成2，则以下语句：</li></ul><pre class="line-numbers language-R"><code class="language-R">sex<-c(1,2,2,1,2,1,1,3) sexsex <- factor(sex, levels=c(1, 2), labels=c("Male", "Female"))sex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol class="list-inline">    <li>1</li>    <li>2</li>    <li>2</li>    <li>1</li>    <li>2</li>    <li>1</li>    <li>1</li>    <li>3</li></ol><ol class="list-inline">    <li>Male</li>    <li>Female</li>    <li>Female</li>    <li>Male</li>    <li>Female</li>    <li>Male</li>    <li>Male</li>    <li>&lt;NA&gt;</li></ol><details>    <summary style="display:list-item;cursor:pointer">        <strong>Levels</strong>:    </summary>    <ol class="list-inline">        <li>'Male'</li>        <li>'Female'</li>    </ol></details><p>在这个栗子里，性别被当成类别型变量，标签“Male”和“Female”替代了1和2在结果中输出，而且所有不是1或2的性别变量将被设为缺失值。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>有这么几个：</p><ul><li><p>vector 向量</p></li><li><p>matrix 矩阵</p></li><li><p>dataframe 数据集</p></li><li><p>list 列表</p></li></ul><p>向量是用于存储数值型、字符型或逻辑型数据的一维数组。执行组合功能的函数c()可用来创建向量</p><p>注意：同一向量中无法混杂不同模式的数据。</p><pre class="line-numbers language-R"><code class="language-R">a <- c(1, 2, 5, 3, 6, -2, 4)b <- c("apple", "pear", "orange")c <- c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-R"><code class="language-R">a <- c(1, 2, 5, 3, 6, -2, 4)b <- c("apple", "pear", "orange")c <- c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE)a[3]a[-3]b[c(1,3)]c[2:4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5</p><ol class="list-inline">    <li>1</li>    <li>2</li>    <li>3</li>    <li>6</li>    <li>-2</li>    <li>4</li></ol><ol class="list-inline">    <li>'apple'</li>    <li>'orange'</li></ol><ol class="list-inline">    <li>FALSE</li>    <li>TRUE</li>    <li>FALSE</li></ol><h2 id="matrix-矩阵"><a href="#matrix-矩阵" class="headerlink" title="matrix 矩阵:"></a>matrix 矩阵:</h2><ul><li><p>矩阵是一个二维数组</p></li><li><p>只是每个元素都拥有相同的模式（数值型、字符型或逻辑型）。</p></li><li><p>可通过函数matrix()创建矩阵。</p></li><li><p>一般使用格式为：</p></li></ul><pre class="line-numbers language-R"><code class="language-R">myMatrix <- matrix(1:15, nrow=3, ncol=5)  myMatrix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><tbody>    <tr><td>1 </td><td>4 </td><td>7 </td><td>10</td><td>13</td></tr>    <tr><td>2 </td><td>5 </td><td>8 </td><td>11</td><td>14</td></tr>    <tr><td>3 </td><td>6 </td><td>9 </td><td>12</td><td>15</td></tr></tbody></table><ul><li><p>我们可以使用下标和方括号来选择矩阵中的行、列或元素。 </p></li><li><p>X[i, ]指矩阵 X 中的第 i 行</p></li></ul><pre class="line-numbers language-R"><code class="language-R">y <- matrix(1:18, nrow=2)y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><tbody>    <tr><td>1 </td><td>3 </td><td>5 </td><td>7 </td><td> 9</td><td>11</td><td>13</td><td>15</td><td>17</td></tr>    <tr><td>2 </td><td>4 </td><td>6 </td><td>8 </td><td>10</td><td>12</td><td>14</td><td>16</td><td>18</td></tr></tbody></table><pre class="line-numbers language-R"><code class="language-R">y[2,]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol class="list-inline">    <li>2</li>    <li>4</li>    <li>6</li>    <li>8</li>    <li>10</li>    <li>12</li>    <li>14</li>    <li>16</li>    <li>18</li></ol><pre class="line-numbers language-R"><code class="language-R">y[,1]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol class="list-inline">    <li>1</li>    <li>2</li></ol><pre class="line-numbers language-R"><code class="language-R">y[2, 3]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6</p><pre class="line-numbers language-R"><code class="language-R">y[2, c(3:5)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol class="list-inline">    <li>6</li>    <li>8</li>    <li>10</li></ol><blockquote><p>矩阵都是二维的，和向量类似，矩阵中也仅能包含一种数据类型。</p></blockquote><h1 id="dataframe-数据框"><a href="#dataframe-数据框" class="headerlink" title="dataframe 数据框"></a>dataframe 数据框</h1><ul><li><p>数据框将是你在R中最常处理的数据结构</p></li><li><p>不同的列可以包含不同模式（数值型、字符型等）的数据</p></li><li><p>下面的向量包含了数值型和字符型数据。由于数据有多种模式，无法将此数据集放入一个矩阵。</p></li></ul><pre class="line-numbers language-R"><code class="language-R">students <- c("A", "B", "C", "D")students<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol class="list-inline">    <li>'A'</li>    <li>'B'</li>    <li>'C'</li>    <li>'D'</li></ol><pre class="line-numbers language-R"><code class="language-R">math_score<-c(100, 80, 70, 95)math_score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol class="list-inline">    <li>100</li>    <li>80</li>    <li>70</li>    <li>95</li></ol><pre class="line-numbers language-R"><code class="language-R">english_score<-c(96, 86, 77, 99)english_score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol class="list-inline">    <li>96</li>    <li>86</li>    <li>77</li>    <li>99</li></ol><pre class="line-numbers language-R"><code class="language-R">* 但是却可以放入同一个数据框<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-R"><code class="language-R">students_scores<-data.frame(students, math_score, english_score)students_scores<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th scope="col">students</th><th scope="col">math_score</th><th scope="col">english_score</th></tr></thead><tbody>    <tr><td>A  </td><td>100</td><td>96 </td></tr>    <tr><td>B  </td><td> 80</td><td>86 </td></tr>    <tr><td>C  </td><td> 70</td><td>77 </td></tr>    <tr><td>D  </td><td> 95</td><td>99 </td></tr></tbody></table><ul><li><p>在数据框里，列与列之间数据类型可以不一样，但是每一列数据类型必须一致。</p></li><li><p>我们在讨论数据框时将交替使用列和变量的说法。</p></li><li><p>选取数据框中元素的方式：可以使用前述（如矩阵中的）下标记号，亦可直接指定列名，例如：</p></li></ul><pre class="line-numbers language-R"><code class="language-R">students_scores[,2]students_scores[,"math_score"]students_scores$math_score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol class="list-inline">    <li>100</li>    <li>80</li>    <li>70</li>    <li>95</li></ol><ol class="list-inline">    <li>100</li>    <li>80</li>    <li>70</li>    <li>95</li></ol><ol class="list-inline">    <li>100</li>    <li>80</li>    <li>70</li>    <li>95</li></ol><pre class="line-numbers language-R"><code class="language-R">data.frame(students_scores$students, students_scores$math_score)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th scope="col">students_scores.students</th><th scope="col">students_scores.math_score</th></tr></thead><tbody>    <tr><td>A  </td><td>100</td></tr>    <tr><td>B  </td><td> 80</td></tr>    <tr><td>C  </td><td> 70</td></tr>    <tr><td>D  </td><td> 95</td></tr></tbody></table><h2 id="list-列表"><a href="#list-列表" class="headerlink" title="list 列表"></a>list 列表</h2><ul><li><p>列表（list）是R的数据类型中最为复杂的一种。一般来说，列表就是一些对象（或成分，component）的有序集合。</p></li><li><p>列表允许你整合若干（可能无关的）对象到单个对象名下。例如，某个列表中可能是若干向量、矩阵、数据框，甚至其他列表的组合。</p></li><li><p>可以使用函数list()创建列表：</p></li></ul><pre class="line-numbers language-R"><code class="language-R">a <- "My First List"b <- c(25, 26, 18, 39)c <- matrix(1:10, nrow=5)d <- c("one", "two", "three")mylist <- list(title=a ,b,c,d)mylist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><dl>    <dt>$title</dt>        <dd>'My First List'</dd>    <dt>[[2]]</dt>        <dd><ol class="list-inline">    <li>25</li>    <li>26</li>    <li>18</li>    <li>39</li></ol></dd>    <dt>[[3]]</dt>        <dd><table><tbody>    <tr><td>1 </td><td> 6</td></tr>    <tr><td>2 </td><td> 7</td></tr>    <tr><td>3 </td><td> 8</td></tr>    <tr><td>4 </td><td> 9</td></tr>    <tr><td>5 </td><td>10</td></tr></tbody></table></dd>    <dt>[[4]]</dt>        <dd><ol class="list-inline">    <li>'one'</li>    <li>'two'</li>    <li>'three'</li></ol></dd></dl><pre class="line-numbers language-R"><code class="language-R">cars <- lm(formula = wt~mpg, data = mtcars)summary(cars)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Call:lm(formula = wt ~ mpg, data = mtcars)Residuals:    Min      1Q  Median      3Q     Max -0.6516 -0.3490 -0.1381  0.3190  1.3684 Coefficients:            Estimate Std. Error t value Pr(&gt;|t|)    (Intercept)  6.04726    0.30869  19.590  &lt; 2e-16 ***mpg         -0.14086    0.01474  -9.559 1.29e-10 ***---Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1Residual standard error: 0.4945 on 30 degrees of freedomMultiple R-squared:  0.7528,    Adjusted R-squared:  0.7446 F-statistic: 91.38 on 1 and 30 DF,  p-value: 1.294e-10</code></pre><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul><li><code>length(object)</code> ：显示对象中元素的数量</li><li><code>dim(object)</code>： 显示某个对象的维度</li><li><code>str(object)</code> ：显示某个对象的结构</li><li><code>class(object)</code>： 显示某个对象的类或类型</li><li><code>names(object)</code>：显示某对象中各成分的名称</li></ul><pre class="line-numbers language-R"><code class="language-R">length(mtcars)length(mtcars$mpg)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>11</p><p>32</p><ul><li><code>c(object, object,...)</code>： 将对象合并入一个向量</li><li><code>cbind(object, object, ...)</code>： 按列合并对象</li><li><code>rbind(object, object, ...)</code>： 按行合并对象</li><li><code>head(object)</code>：列出某个对象的开始部分</li><li><code>tail(object)</code>：列出某个对象的最后部分</li><li><code>ls()</code>： 显示当前的对象列表</li><li><code>rm(object, object, ...)</code>： 删除一个或更多个对象。</li><li><code>rm(list = ls())</code>：将删除当前工作环境中的几乎所有对象4</li></ul><pre class="line-numbers language-R"><code class="language-R">c(2, 20)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol class="list-inline">    <li>2</li>    <li>20</li></ol><pre class="line-numbers language-R"><code class="language-R">cbind(students, math_score)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th scope="col">students</th><th scope="col">math_score</th></tr></thead><tbody>    <tr><td>A  </td><td>100</td></tr>    <tr><td>B  </td><td>80 </td></tr>    <tr><td>C  </td><td>70 </td></tr>    <tr><td>D  </td><td>95 </td></tr></tbody></table><pre class="line-numbers language-R"><code class="language-R">rbind(students, math_score)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><tbody>    <tr><th scope="row">students</th><td>A  </td><td>B  </td><td>C  </td><td>D  </td></tr>    <tr><th scope="row">math_score</th><td>100</td><td>80 </td><td>70 </td><td>95 </td></tr></tbody></table><pre class="line-numbers language-R"><code class="language-R">head(mtcars)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th></th><th scope="col">mpg</th><th scope="col">cyl</th><th scope="col">disp</th><th scope="col">hp</th><th scope="col">drat</th><th scope="col">wt</th><th scope="col">qsec</th><th scope="col">vs</th><th scope="col">am</th><th scope="col">gear</th><th scope="col">carb</th></tr></thead><tbody>    <tr><th scope="row">Mazda RX4</th><td>21.0 </td><td>6    </td><td>160  </td><td>110  </td><td>3.90 </td><td>2.620</td><td>16.46</td><td>0    </td><td>1    </td><td>4    </td><td>4    </td></tr>    <tr><th scope="row">Mazda RX4 Wag</th><td>21.0 </td><td>6    </td><td>160  </td><td>110  </td><td>3.90 </td><td>2.875</td><td>17.02</td><td>0    </td><td>1    </td><td>4    </td><td>4    </td></tr>    <tr><th scope="row">Datsun 710</th><td>22.8 </td><td>4    </td><td>108  </td><td> 93  </td><td>3.85 </td><td>2.320</td><td>18.61</td><td>1    </td><td>1    </td><td>4    </td><td>1    </td></tr>    <tr><th scope="row">Hornet 4 Drive</th><td>21.4 </td><td>6    </td><td>258  </td><td>110  </td><td>3.08 </td><td>3.215</td><td>19.44</td><td>1    </td><td>0    </td><td>3    </td><td>1    </td></tr>    <tr><th scope="row">Hornet Sportabout</th><td>18.7 </td><td>8    </td><td>360  </td><td>175  </td><td>3.15 </td><td>3.440</td><td>17.02</td><td>0    </td><td>0    </td><td>3    </td><td>2    </td></tr>    <tr><th scope="row">Valiant</th><td>18.1 </td><td>6    </td><td>225  </td><td>105  </td><td>2.76 </td><td>3.460</td><td>20.22</td><td>1    </td><td>0    </td><td>3    </td><td>1    </td></tr></tbody></table><h2 id="基本作图"><a href="#基本作图" class="headerlink" title="基本作图"></a>基本作图</h2><p>一图胜千言</p><ul><li><p>人类非常善于从视觉呈现中洞察关系。</p></li><li><p>一幅精心绘制的图形能够帮助你在数以千计的零散信 息中做出有意义的比较，提炼出使用其他方法时不那么容易发现的模式。</p></li><li><p>R是一个惊艳的图形构建平台。在通常的交互式会话中，我们可 以通过逐条输入语句构建图形，逐渐完善图形特征，直至得到想要的效果。</p></li><li><p><code>plot()</code>是R中为对象作图的一个泛型函数(它的输出将根据所绘制对象类型的不同而变化)。 </p></li></ul><p><code>plot(x, y)</code>,<br>将x置于横轴，将y置于纵轴，绘制点集(x, y)，散点图。使用help(plot)可以查看其他选项。</p><p>下面的代码打开一个图形窗口并生成了一幅散点图，横轴表 示车身重量，纵轴为每加仑汽油行驶的英里数。</p><pre class="line-numbers language-R"><code class="language-R">plot(mtcars$wt, mtcars$mpg,     xlab="Miles Per Gallon",     ylab="Car Weight")abline(lm(mtcars$mpg~mtcars$wt))title("Regression of MPG on Weight")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="1-r-intro-cn_files/1-r-intro-cn_53_0.png" alt="png"></p><pre class="line-numbers language-R"><code class="language-R">plot(mtcars$wt, mtcars$mpg,         xlab="Miles Per Gallon",         ylab="Car Weight",     col=4,     pch=16)abline(lm(mtcars$mpg~mtcars$wt))title("Regression of MPG on Weight")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="1-r-intro-cn_files/1-r-intro-cn_54_0.png" alt="png"></p><p>有这些形状可以选择：</p><p><img src="https://www.dropbox.com/s/d8dz3hhq36wx1es/r-basic-plotting-tools-pch-1.png?dl=1" alt></p><p>总是用美元符号，是不是太麻烦？换一种方式：</p><pre class="line-numbers language-R"><code class="language-R">with(mtcars,{plot(wt, mpg)abline(lm(mpg~wt))title("Regression of MPG on Weight")})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="1-r-intro-cn_files/1-r-intro-cn_56_0.png" alt="png"></p><p>全局参数设定，多图同列, 例如设置2列2行，<br>四个直方图：</p><pre class="line-numbers language-R"><code class="language-R">with(mtcars,{  par(mfrow=c(2,2))  hist(wt)  hist(mpg)  hist(disp)  hist(hp)})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="1-r-intro-cn_files/1-r-intro-cn_58_0.png" alt="png"></p><pre class="line-numbers language-R"><code class="language-R">boxplot(mtcars$mpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1-r-intro-cn_files/1-r-intro-cn_59_0.png" alt="png"></p><h3 id="保存图形："><a href="#保存图形：" class="headerlink" title="保存图形："></a>保存图形：</h3><ul><li><p>通过代码</p></li><li><p>通过图形用户界面。</p></li><li><p>要通过代码保存图形，将绘图语句夹在开启目标图形设备的语句和关闭目标图形设备的语句之间即可。</p></li><li><p>例如，以下代码会将图形保存到当前工作 目录中名为mygraph.pdf的PDF文件中:</p></li></ul><pre class="line-numbers language-R"><code class="language-R">getwd()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‘/Users/yd/Blog/source/_posts’</p><pre class="line-numbers language-R"><code class="language-R">pdf("mygraph.pdf")      attach(mtcars)      plot(wt, mpg)      abline(lm(mpg~wt))      title("Regression of MPG on Weight")      detach(mtcars)dev.off()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>The following object is masked from package:ggplot2:    mpg</code></pre><p><strong>pdf:</strong> 2</p><p>除了pdf()，还可以使用函数win.metafile()、png()、jpeg()、bmp()等将图形保存为其他格式。</p><ul><li>通过图形用户界面保存图形，在RStudio的右下角，”Export”即可。</li></ul><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p><img src="https://www.dropbox.com/s/gn5ffuougtqsujb/xl_r.png?dl=1" alt>{width=250px}</p><p>读取数据是数据分析的第一步，应该 so easy!</p><p>然而现实并非如此，因为真实的世界里，数据的格式百花齐放：<br><img src="https://www.dropbox.com/s/mdod5vejgjnkodi/data_format.png?dl=1" alt>{width=500px}</p><pre class="line-numbers language-R"><code class="language-R">ad<-read.csv("https://www.dropbox.com/s/m6jh5kspianm215/advertising.csv?dl=1")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>许多数据以flat files形式出现: simple tabular text files.<br>我们首先学习 how to read CSV and text files in R。<br>需要用到package <code>utils</code>里面的<code>read.csv()</code>函数，是R自带的。</p><p>我们来使用<code>swimming_pools.csv</code>做练习。it contains data on swimming pools in Brisbane, Australia (Source: data.gov.au).</p><p>可以使用我提供的dropbox链接下载数据到自己的本地硬盘，然后将其路径输入到<code>read.csv()</code>，或者直接使用dropbox链接读取。</p><p><code>read.csv()</code> 默认将<code>string</code> 读成<code>factor</code>，可以通过设定选项<code>stringsAsFactors = FALSE</code>来修改。</p><p>看看结果有什么不同：</p><pre class="line-numbers language-R"><code class="language-R">pools<-read.csv("https://www.dropbox.com/s/unbyqfspb95rsqm/swimming_pools.csv?dl=1")str(pools)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;data.frame&#39;:    20 obs. of  4 variables: $ Name     : Factor w/ 20 levels &quot;Acacia Ridge Leisure Centre&quot;,..: 1 2 3 4 5 6 19 7 8 9 ... $ Address  : Factor w/ 20 levels &quot;1 Fairlead Crescent, Manly&quot;,..: 5 20 18 10 9 11 6 15 12 17 ... $ Latitude : num  -27.6 -27.6 -27.6 -27.5 -27.4 ... $ Longitude: num  153 153 153 153 153 ...</code></pre><pre class="line-numbers language-R"><code class="language-R">pools<-read.csv("https://www.dropbox.com/s/unbyqfspb95rsqm/swimming_pools.csv?dl=1", stringsAsFactors = FALSE)str(pools)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#39;data.frame&#39;:    20 obs. of  4 variables: $ Name     : chr  &quot;Acacia Ridge Leisure Centre&quot; &quot;Bellbowrie Pool&quot; &quot;Carole Park&quot; &quot;Centenary Pool (inner City)&quot; ... $ Address  : chr  &quot;1391 Beaudesert Road, Acacia Ridge&quot; &quot;Sugarwood Street, Bellbowrie&quot; &quot;Cnr Boundary Road and Waterford Road Wacol&quot; &quot;400 Gregory Terrace, Spring Hill&quot; ... $ Latitude : num  -27.6 -27.6 -27.6 -27.5 -27.4 ... $ Longitude: num  153 153 153 153 153 ...</code></pre><p>我们再学习一下如何读取文本数据。 .txt files which are basically text files</p><p>使用的函数是<code>read.delim()</code>，默认是数据点分隔方式是 <code>\t</code>。(fields in a record are delimited by tabs) and the header argument to TRUE (the first row contains the field names)。</p><p>练习读取数据 <code>hotdogs.txt</code>, containing information on sodium and calorie levels in different hotdogs (Source: UCLA)。</p><pre class="line-numbers language-R"><code class="language-R">hotdogs<-read.delim("https://www.dropbox.com/s/0hbraqcpl4dw8w8/hotdogs.txt?dl=1", sep="\t",header = TRUE)head(hotdogs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th scope="col">Beef</th><th scope="col">X186</th><th scope="col">X495</th></tr></thead><tbody>    <tr><td>Beef</td><td>181 </td><td>477 </td></tr>    <tr><td>Beef</td><td>176 </td><td>425 </td></tr>    <tr><td>Beef</td><td>149 </td><td>322 </td></tr>    <tr><td>Beef</td><td>184 </td><td>482 </td></tr>    <tr><td>Beef</td><td>190 </td><td>587 </td></tr>    <tr><td>Beef</td><td>158 </td><td>370 </td></tr></tbody></table><pre class="line-numbers language-R"><code class="language-R"># Summarize hotdogssummary(hotdogs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>      Beef         X186            X495       Beef   :19   Min.   : 86.0   Min.   :144.0   Meat   :17   1st Qu.:132.0   1st Qu.:360.0   Poultry:17   Median :144.0   Median :405.0                Mean   :144.7   Mean   :423.5                3rd Qu.:172.0   3rd Qu.:506.0                Max.   :195.0   Max.   :645.0  </code></pre><p>使用<code>read.table()</code>来通吃各种<code>非正常</code>数据，需要具体设置各种参数。<br>具体的我们来看个例子，依旧用<code>hotdogs</code>数据：</p><pre class="line-numbers language-R"><code class="language-R"># Path to the hotdogs.txt file: pathpath <- file.path("https://www.dropbox.com/s/0hbraqcpl4dw8w8/hotdogs.txt?dl=1")# Import the hotdogs.txt file: hotdogshotdogs <- read.table(path,                       sep = "\t",                       col.names = c("type", "calories", "sodium"))# Call head() on hotdogshead(hotdogs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th scope="col">type</th><th scope="col">calories</th><th scope="col">sodium</th></tr></thead><tbody>    <tr><td>Beef</td><td>186 </td><td>495 </td></tr>    <tr><td>Beef</td><td>181 </td><td>477 </td></tr>    <tr><td>Beef</td><td>176 </td><td>425 </td></tr>    <tr><td>Beef</td><td>149 </td><td>322 </td></tr>    <tr><td>Beef</td><td>184 </td><td>482 </td></tr>    <tr><td>Beef</td><td>190 </td><td>587 </td></tr></tbody></table><h3 id="dataframe-slice"><a href="#dataframe-slice" class="headerlink" title="dataframe slice"></a>dataframe slice</h3><pre class="line-numbers language-R"><code class="language-R"># Select the hot dog with the least calories:Li_Lei <- hotdogs[which.min(hotdogs$calories), ]Li_Lei<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th></th><th scope="col">type</th><th scope="col">calories</th><th scope="col">sodium</th></tr></thead><tbody>    <tr><th scope="row">50</th><td>Poultry</td><td>86     </td><td>358    </td></tr></tbody></table><pre class="line-numbers language-R"><code class="language-R"># Select the observation with the most sodium:Han_Meimei <- hotdogs[which.min(hotdogs$sodium), ]Han_Meimei<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th></th><th scope="col">type</th><th scope="col">calories</th><th scope="col">sodium</th></tr></thead><tbody>    <tr><th scope="row">33</th><td>Meat</td><td>107 </td><td>144 </td></tr></tbody></table><p>单独设置每一个变量的数据类型。<br>如果我有好几个<code>string</code>类型的变量在我的数据里，我想要有的是<code>string</code>，有的是<code>logical</code>，还有的是<code>factor</code>，怎么破？</p><pre class="line-numbers language-R"><code class="language-R">hotdogs <- read.delim("https://www.dropbox.com/s/0hbraqcpl4dw8w8/hotdogs.txt?dl=1", header = FALSE, col.names = c("type", "calories", "sodium"))# Display structure of hotdogsstr(hotdogs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;data.frame&#39;:    54 obs. of  3 variables: $ type    : Factor w/ 3 levels &quot;Beef&quot;,&quot;Meat&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... $ calories: int  186 181 176 149 184 190 158 139 175 148 ... $ sodium  : int  495 477 425 322 482 587 370 322 479 375 ...</code></pre><pre class="line-numbers language-R"><code class="language-R"># Edit the colClasses argument to import the data correctly: hotdogs2hotdogs2 <- read.delim("https://www.dropbox.com/s/0hbraqcpl4dw8w8/hotdogs.txt?dl=1", header = FALSE,                        col.names = c("type", "calories", "sodium"),                       colClasses = c("factor", "NULL", "numeric"))# Display structure of hotdogs2str(hotdogs2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;data.frame&#39;:    54 obs. of  2 variables: $ type  : Factor w/ 3 levels &quot;Beef&quot;,&quot;Meat&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... $ sodium: num  495 477 425 322 482 587 370 322 479 375 ...</code></pre><h2 id="编写函数"><a href="#编写函数" class="headerlink" title="编写函数"></a>编写函数</h2><p>到目前为止你已经接触并使用了很多R的函数，现在我们要学习编写函数？为什么要编写函数，不是已经有很多现成的吗？再说，我又不编写r packages。我们学习编写函数有两个原因：</p><ol><li>make your code more readable, avoid coding errors</li><li>automate repetitive tasks</li></ol><p>函数的模版一般长这个样子：<br>my_fun &lt;- function(arg1, arg2) {<br>  # body<br>}</p><ol><li>my_fun is the variable that you want to assign your function to</li><li>arg1 and arg2 are arguments to the function. The template has two arguments, but you can specify any number of arguments, each separated by a comma. </li><li>You then replace # body with the R code that your function will execute, referring to the inputs by the argument names you specified.</li></ol><p>来，我们编写一个计算圆面积的函数 <code>size()</code>:</p><pre class="line-numbers language-R"><code class="language-R"># Define size() functionsize <- function(x) {  3.14*x^2}# Call size() with argument 5size(5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>78.5</p><p>注意：</p><ol><li>match arguments by positions, by names?<br>by name is always perferred, especially when you have more than 2 arguments, or the arguments have default values. </li><li>when you call a function, you should place a space around = in function calls, and always put a space after a comma, not before (just like in regular English). Using whitespace makes it easier to skim the function for the important components.</li></ol><p>一步一步，我们来搭建另一个函数<code>rescale01</code>可以把一个数据集的每一列数据都变成0-1之间：</p><p><code>(df$a - min(df$a, na.rm = TRUE)) /(max(df$a, na.rm = TRUE) - min(df$a, na.rm = TRUE))</code></p><p>首先，确定需要哪些输入<code>inputs</code>？很明显是df$a，简便起见，就叫它<code>x</code>吧。</p><p>定义一个示意的向量，我们可以把上面的一段代码写成这样：</p><p>庖丁解牛，我们看看函数的核心里面都有什么，有重复出现的内容吗？我们可不可以简化一下？</p><ol><li>One obviously duplicated statement is min(x, na.rm = TRUE). It makes more sense for us just to calculate it once, store the result, and then refer to it when needed. </li><li>In fact, since we also need the maximum value of x, it would be even better to calculate the range once, then refer to the first and second elements when they are needed.</li></ol><p>具体我们这么操作：</p><ol><li>Define the intermediate variable rng to contain the range of x using the function range(). </li><li>Specify the na.rm() argument to automatically ignore any NAs in the vector.</li><li>Rewrite the snippet to refer to this intermediate variable.</li></ol><pre class="line-numbers language-R"><code class="language-R"># Define example vector xx <- 1:10 # Define rngrng <- range(x, na.rm = TRUE)# Rewrite this snippet to refer to the elements of rng(x - rng[1]) /(rng[2] - rng[1])# Use the function template to create the rescale01 functionrescale01 <- function(x) {  rng <- range(x, na.rm = TRUE)  (x - rng[1]) / (rng[2] - rng[1])}# Test your function, call rescale using the vector x as the argumentrescale01(x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol class="list-inline">    <li>0</li>    <li>0.111111111111111</li>    <li>0.222222222222222</li>    <li>0.333333333333333</li>    <li>0.444444444444444</li>    <li>0.555555555555556</li>    <li>0.666666666666667</li>    <li>0.777777777777778</li>    <li>0.888888888888889</li>    <li>1</li></ol><ol class="list-inline">    <li>0</li>    <li>0.111111111111111</li>    <li>0.222222222222222</li>    <li>0.333333333333333</li>    <li>0.444444444444444</li>    <li>0.555555555555556</li>    <li>0.666666666666667</li>    <li>0.777777777777778</li>    <li>0.888888888888889</li>    <li>1</li></ol><h2 id="apply-family"><a href="#apply-family" class="headerlink" title="apply family"></a>apply family</h2><p>for loop 很有用，帮助我们完成重复性劳动并减少出错。不过呢，有时候要写的代码还是太多比较麻烦。所以<code>apply family</code> 闪亮登场，使我们的工作更容易。</p><p>lapply()</p><ol><li>apply function over list or vector</li><li>output is a list</li></ol><p>sapply()</p><ol><li>apply function over list or vector</li><li>try to simplify list to array<br>Note: Arrays are the R data objects which can store data in more than two dimensions.</li></ol><p>vapply()</p><ol><li>apply function over list or vector</li><li>explicitly specify output format</li><li><code>vapply()</code> is safer than <code>sapply()</code></li></ol><p>具体怎么操作？<br>我们举个例子，简单直接：</p><ol><li>先写一个<code>select_el()</code>函数，让它提取向量里指定位置的元素</li><li>我们使用这个函数, 结合<code>lapply</code>来分别提取数据里几个数学家的名字和生日</li></ol><p>注意<code>lapply</code>的<code>l</code>是 list的意思，返回的值都是list。这个函数的作用是把其它的函数作用到数据集里面的每一个元素。</p><pre class="line-numbers language-R"><code class="language-R"># Definition of split_lowpioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")split <- strsplit(pioneers, split = ":")split_low <- lapply(split, tolower)split_low<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol>    <li><ol class="list-inline">    <li>'gauss'</li>    <li>'1777'</li></ol></li>    <li><ol class="list-inline">    <li>'bayes'</li>    <li>'1702'</li></ol></li>    <li><ol class="list-inline">    <li>'pascal'</li>    <li>'1623'</li></ol></li>    <li><ol class="list-inline">    <li>'pearson'</li>    <li>'1857'</li></ol></li></ol><pre class="line-numbers language-R"><code class="language-R"># Generic select functionselect_el <- function(x, index) {  x[index]}# Use lapply() twice on split_low: names and yearsnames <- lapply(split_low, select_el, index = 1)years <- lapply(split_low, select_el, index = 2)namesyears<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol>    <li>'gauss'</li>    <li>'bayes'</li>    <li>'pascal'</li>    <li>'pearson'</li></ol><ol>    <li>'1777'</li>    <li>'1702'</li>    <li>'1623'</li>    <li>'1857'</li></ol><pre class="line-numbers language-R"><code class="language-R"># Use lapply() twice on split_low: names and yearsnames <- sapply(split_low, select_el, index = 1)years <- sapply(split_low, select_el, index = 2)namesyears<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol class="list-inline">    <li>'gauss'</li>    <li>'bayes'</li>    <li>'pascal'</li>    <li>'pearson'</li></ol><ol class="list-inline">    <li>'1777'</li>    <li>'1702'</li>    <li>'1623'</li>    <li>'1857'</li></ol><pre class="line-numbers language-R"><code class="language-R">temp<- list(c(3,  7,  9,  6, -1), c(6,  9, 12, 13,  5), c(4,  8,  3, -1, -3),                c(1 , 4,  7,  2, -2), c(5, 7, 9, 4, 2), c(-3,  5,  8,  9,  4), c(3, 6, 9, 4, 1))temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol>    <li><ol class="list-inline">    <li>3</li>    <li>7</li>    <li>9</li>    <li>6</li>    <li>-1</li></ol></li>    <li><ol class="list-inline">    <li>6</li>    <li>9</li>    <li>12</li>    <li>13</li>    <li>5</li></ol></li>    <li><ol class="list-inline">    <li>4</li>    <li>8</li>    <li>3</li>    <li>-1</li>    <li>-3</li></ol></li>    <li><ol class="list-inline">    <li>1</li>    <li>4</li>    <li>7</li>    <li>2</li>    <li>-2</li></ol></li>    <li><ol class="list-inline">    <li>5</li>    <li>7</li>    <li>9</li>    <li>4</li>    <li>2</li></ol></li>    <li><ol class="list-inline">    <li>-3</li>    <li>5</li>    <li>8</li>    <li>9</li>    <li>4</li></ol></li>    <li><ol class="list-inline">    <li>3</li>    <li>6</li>    <li>9</li>    <li>4</li>    <li>1</li></ol></li></ol><pre class="line-numbers language-R"><code class="language-R"># Create a function that returns min and max of a vector: extremesextremes <- function(x) {  c(min = min(x), max = max(x))}# Apply extremes() over temp with sapply()sapply(temp, extremes)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><tbody>    <tr><th scope="row">min</th><td>-1</td><td> 5</td><td>-3</td><td>-2</td><td>2 </td><td>-3</td><td>1 </td></tr>    <tr><th scope="row">max</th><td> 9</td><td>13</td><td> 8</td><td> 7</td><td>9 </td><td> 9</td><td>9 </td></tr></tbody></table><pre class="line-numbers language-R"><code class="language-R"># Apply extremes() over temp with lapply()lapply(temp, extremes)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol>    <li><dl class="dl-horizontal">    <dt>min</dt>        <dd>-1</dd>    <dt>max</dt>        <dd>9</dd></dl></li>    <li><dl class="dl-horizontal">    <dt>min</dt>        <dd>5</dd>    <dt>max</dt>        <dd>13</dd></dl></li>    <li><dl class="dl-horizontal">    <dt>min</dt>        <dd>-3</dd>    <dt>max</dt>        <dd>8</dd></dl></li>    <li><dl class="dl-horizontal">    <dt>min</dt>        <dd>-2</dd>    <dt>max</dt>        <dd>7</dd></dl></li>    <li><dl class="dl-horizontal">    <dt>min</dt>        <dd>2</dd>    <dt>max</dt>        <dd>9</dd></dl></li>    <li><dl class="dl-horizontal">    <dt>min</dt>        <dd>-3</dd>    <dt>max</dt>        <dd>9</dd></dl></li>    <li><dl class="dl-horizontal">    <dt>min</dt>        <dd>1</dd>    <dt>max</dt>        <dd>9</dd></dl></li></ol><pre class="line-numbers language-R"><code class="language-R"># Definition of basics()basics <- function(x) {  c(min = min(x), mean = mean(x), max = max(x))}# Apply basics() over temp using vapply()vapply(temp, basics, numeric(3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><tbody>    <tr><th scope="row">min</th><td>-1.0</td><td> 5  </td><td>-3.0</td><td>-2.0</td><td>2.0 </td><td>-3.0</td><td>1.0 </td></tr>    <tr><th scope="row">mean</th><td> 4.8</td><td> 9  </td><td> 2.2</td><td> 2.4</td><td>5.4 </td><td> 4.6</td><td>4.6 </td></tr>    <tr><th scope="row">max</th><td> 9.0</td><td>13  </td><td> 8.0</td><td> 7.0</td><td>9.0 </td><td> 9.0</td><td>9.0 </td></tr></tbody></table><pre class="line-numbers language-R"><code class="language-R">sapply(temp, basics)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><tbody>    <tr><th scope="row">min</th><td>-1.0</td><td> 5  </td><td>-3.0</td><td>-2.0</td><td>2.0 </td><td>-3.0</td><td>1.0 </td></tr>    <tr><th scope="row">mean</th><td> 4.8</td><td> 9  </td><td> 2.2</td><td> 2.4</td><td>5.4 </td><td> 4.6</td><td>4.6 </td></tr>    <tr><th scope="row">max</th><td> 9.0</td><td>13  </td><td> 8.0</td><td> 7.0</td><td>9.0 </td><td> 9.0</td><td>9.0 </td></tr></tbody></table><p>完结撒花！<br><img src="https://www.dropbox.com/s/9w3nxj755iqxnrz/sahua.gif?dl=1" alt></p>]]></content>
      
      
      <categories>
          
          <category> Courses </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data science </tag>
            
            <tag> concepts </tag>
            
            <tag> basics </tag>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Resources for reference</title>
      <link href="/2020/04/27/collection/"/>
      <url>/2020/04/27/collection/</url>
      
        <content type="html"><![CDATA[<p>Here I collected and am still collecting useful web pages for future reference:</p><blockquote><p>Documents for hexo-theme-matery:</p></blockquote><ul><li>English:<br><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README.md" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README.md</a></li><li>Chinese:<br><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></li></ul><blockquote><p>How to build a blog with github pages from scratch:</p></blockquote><p><a href="http://www.youtube.com/watch?v=erKYtw4Rfhk" target="_blank" rel="noopener"><img src="http://img.youtube.com/vi/erKYtw4Rfhk/0.jpg" alt></a></p><blockquote><p>Convert youtube url to markdown</p></blockquote><p><a href="http://embedyoutube.org/" target="_blank" rel="noopener">http://embedyoutube.org/</a></p><blockquote><p>How to run R in Jupyter notebook from Anaconda<br><a href="https://docs.anaconda.com/anaconda/navigator/tutorials/r-lang/" target="_blank" rel="noopener">https://docs.anaconda.com/anaconda/navigator/tutorials/r-lang/</a></p></blockquote><blockquote><p>Convert jupyter notebook to markdown (md) and LaTeX, HTML<br>From the command line, use nbconvert to convert a Jupyter notebook (input) to a a different format (output). The basic command structure is:</p><pre><code>$ jupyter nbconvert --to &lt;output format&gt; &lt;input notebook&gt;</code></pre></blockquote><p>where <code>&lt;output format&gt;</code> is the desired output format and <code>&lt;input notebook&gt;</code> is the filename of the Jupyter notebook.</p><p>Example: Convert a notebook to markdown</p><pre><code>$ jupyter nbconvert --to html mynotebook.ipynb</code></pre><blockquote><p>Download pycharm (community version for free)<br><a href="https://www.jetbrains.com/pycharm/download/#section=mac" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/download/#section=mac</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Resources </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> custom </tag>
            
            <tag> theme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>customize-pages</title>
      <link href="/2020/04/27/customize-pages/"/>
      <url>/2020/04/27/customize-pages/</url>
      
        <content type="html"><![CDATA[<h3 id="Understand-the-frame-work"><a href="#Understand-the-frame-work" class="headerlink" title="Understand the frame work"></a>Understand the frame work</h3><p>Conceptually, there are two main moving parts in our GitHub Pages:</p><ul><li>contents, such as our posts, tags and categories. They are like the furniture we want to put in our house</li><li>theme. It is our house which has living room, bedrooms, bathrooms, kitchen.</li><li>We put our contents into the theme we select to build our blog.</li><li>If you want to delete and/ or add pages, it means you change remove and/ or add more rooms to your house, that is, you change the theme.</li></ul><p>With the concepts being said, you go to the _config.yml file under your theme folder, find the menu<br>chunk of code, where you can delete and/ or add pages. This is equal to delete and/ or add icons in the navigation bar.</p><pre><code># main menu navigation url and iconmenu:  Index:    url: /    icon: fa-home  Tags:    url: /tags    icon: fa-tags  Categories:    url: /categories    icon: fa-bookmark  Archives:    url: /archives    icon: fa-archive  About:    url: /about    icon: fa-user-circle-o</code></pre><p>In my experience, I need less pages, so I deleted the corresponding code under menu and their<br>folders in the source folder. It worked well. But I have’t tried to add pages. I assume adding<br>pages will require more changes in the theme. </p>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> custom </tag>
            
            <tag> github pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Python from data science perspective</title>
      <link href="/2020/04/27/1-py-intro/"/>
      <url>/2020/04/27/1-py-intro/</url>
      
        <content type="html"><![CDATA[<h1 id="Crash-course-for-Python"><a href="#Crash-course-for-Python" class="headerlink" title="Crash course for Python"></a>Crash course for Python</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Python is a general-purpose programming language that is becoming more and more popular for doing data science.<br>Companies worldwide are using Python to harvest insights from their data and get a competitive edge. I am making a series of study notes focusing on Python specifically for data science. </p><h2 id="Install-Python"><a href="#Install-Python" class="headerlink" title="Install Python"></a>Install Python</h2><ul><li>If you are a mac user, congratulations, you have python installed by default. You may go to your terminal, type </li></ul><pre class="line-numbers language-python"><code class="language-python">python <span class="token operator">-</span><span class="token operator">-</span>version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>to check the version of your python. If it is the latest version, good. If not, go to <a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a> to obtain the latest version. Don’t worry, two python version won’t have any conflict on your computer.</p><ul><li>If you are a windows user, you need to go to <a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a> to download.</li></ul><p>For data science purpose, I highly recommand using Anaconda as it provides a variety of tools for data science<br>you can download Anaconda from <a href="https://www.anaconda.com/products/individual" target="_blank" rel="noopener">https://www.anaconda.com/products/individual</a>. Just keep clicking untill you finish installing Anaconda.</p><p>Now, you are ready to start your data science journey with Python!</p><h2 id="Basic-math-operations"><a href="#Basic-math-operations" class="headerlink" title="Basic math operations"></a>Basic math operations</h2><ul><li>Addition, subtraction</li><li>Multiplication, division, modulo, and exponentiation</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Addition, subtraction</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Multiplication, division, modulo, and exponentiation</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>100155.0416</code></pre><h3 id="Exercise-How-much-is-your-100-dollar-worth-after-7-years"><a href="#Exercise-How-much-is-your-100-dollar-worth-after-7-years" class="headerlink" title="Exercise: How much is your 100 dollar worth after 7 years?"></a>Exercise: How much is your 100 dollar worth after 7 years?</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>194.87171000000012</code></pre><h3 id="Exercise-continued"><a href="#Exercise-continued" class="headerlink" title="Exercise continued"></a>Exercise continued</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create a variable savings</span>savings <span class="token operator">=</span> <span class="token number">100</span><span class="token comment" spellcheck="true"># Create a variable growth_multiplier</span>growth_multiplier<span class="token operator">=</span><span class="token number">1.1</span><span class="token comment" spellcheck="true"># Calculate result</span>result<span class="token operator">=</span>savings<span class="token operator">*</span>growth_multiplier<span class="token operator">**</span><span class="token number">7</span><span class="token comment" spellcheck="true"># Print out result</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>194.87171000000012</code></pre><h4 id="Type-conversion"><a href="#Type-conversion" class="headerlink" title="Type conversion"></a>Type conversion</h4><p>Using the + operator to paste together two strings can be very useful in building custom messages.</p><p>Suppose, for example, that you’ve calculated the return of your investment and want to summarize the results in a string. Assuming the floats savings and result are defined, you can try something like this:</p><p>print(“I started with $” + savings + “ and now have $” + result + “. Awesome!”)<br>This will not work, though, as you cannot simply sum strings and floats.</p><p>To fix the error, you’ll need to explicitly convert the types of your variables. More specifically, you’ll need str(), to convert a value into a string. str(savings), for example, will convert the float savings to a string.</p><p>Similar functions such as int(), float() and bool() will help you convert Python values into any type.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Fix the printout</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I started with $"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>savings<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and now have $"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">". Awesome!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>I started with $100 and now have $194.87171000000012. Awesome!</code></pre><h3 id="Extra-Exercise"><a href="#Extra-Exercise" class="headerlink" title="Extra Exercise"></a>Extra Exercise</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of pi_string</span>pi_string <span class="token operator">=</span> <span class="token string">"3.1415926"</span><span class="token comment" spellcheck="true"># Convert pi_string into float: pi_float</span>pi_float <span class="token operator">=</span> float<span class="token punctuation">(</span>pi_string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>pi_string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>pi_float<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;str&#39;&gt;&lt;class &#39;float&#39;&gt;</code></pre><h2 id="Equality"><a href="#Equality" class="headerlink" title="Equality"></a>Equality</h2><ul><li>Comparison of booleans</li><li>Comparison of integers</li><li>Comparison of strings</li><li>Compare a boolean with a numeric</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Comparison of booleans</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Comparison of integers</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">15</span> <span class="token operator">!=</span> <span class="token number">75</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Comparison of strings</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pyscript"</span> <span class="token operator">==</span> <span class="token string">"PyScript"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Compare a boolean with a numeric</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>FalseTrueFalseTrue</code></pre><ul><li>Comparison of integers</li><li>Comparison of strings</li><li>Comparison of booleans</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Comparison of integers</span>x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Comparison of strings</span>y <span class="token operator">=</span> <span class="token string">"test"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test"</span> <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Comparison of booleans</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">></span> <span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>FalseTrueTrue</code></pre><h2 id="Boolean-Operators-in-action"><a href="#Boolean-Operators-in-action" class="headerlink" title="Boolean Operators in action"></a>Boolean Operators in action</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define variables</span>my_kitchen <span class="token operator">=</span> <span class="token number">18.0</span>your_kitchen <span class="token operator">=</span> <span class="token number">14.0</span><span class="token comment" spellcheck="true"># my_kitchen bigger than 10 and smaller than 18?</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_kitchen<span class="token operator">></span><span class="token number">10</span> <span class="token operator">and</span> my_kitchen<span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># my_kitchen smaller than 14 or bigger than 17?</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_kitchen<span class="token operator">&lt;</span><span class="token number">14</span> <span class="token operator">or</span> my_kitchen<span class="token operator">></span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Double my_kitchen smaller than triple your_kitchen?</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_kitchen<span class="token operator">*</span><span class="token number">2</span><span class="token operator">&lt;</span>your_kitchen<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>FalseTrueTrue</code></pre><h2 id="Boolean-operators-with-Numpy"><a href="#Boolean-operators-with-Numpy" class="headerlink" title="Boolean operators with Numpy"></a>Boolean operators with Numpy</h2><p>What is Numpy? No worries for now, more explanations later.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create arrays</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npmy_house <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token punctuation">)</span>your_house <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">14.0</span><span class="token punctuation">,</span> <span class="token number">24.0</span><span class="token punctuation">,</span> <span class="token number">14.25</span><span class="token punctuation">,</span> <span class="token number">9.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># my_house greater than 18.5 or smaller than 10</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>logical_or<span class="token punctuation">(</span>my_house<span class="token operator">></span><span class="token number">18.5</span><span class="token punctuation">,</span> my_house<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Both my_house and your_house smaller than 11</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>my_house<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">,</span> your_house<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[False  True False  True][False False False  True]</code></pre><h2 id="if-else-elif"><a href="#if-else-elif" class="headerlink" title="if, else, elif"></a>if, else, elif</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define variables</span>room <span class="token operator">=</span> <span class="token string">"kit"</span>area <span class="token operator">=</span> <span class="token number">14.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># if statement for room</span><span class="token keyword">if</span> room <span class="token operator">==</span> <span class="token string">"kit"</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"looking around in the kitchen."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>looking around in the kitchen.</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># if statement for area</span><span class="token keyword">if</span> area <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"big place!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># if-else construct for room</span><span class="token keyword">if</span> room <span class="token operator">==</span> <span class="token string">"kit"</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"looking around in the kitchen."</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"looking around elsewhere."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># if-else construct for area :</span><span class="token keyword">if</span> area <span class="token operator">></span> <span class="token number">15</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"big place!"</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pretty small."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>looking around in the kitchen.pretty small.</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Define variables</span>room <span class="token operator">=</span> <span class="token string">"bed"</span>area <span class="token operator">=</span> <span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># if-elif-else construct for room</span><span class="token keyword">if</span> room <span class="token operator">==</span> <span class="token string">"kit"</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"looking around in the kitchen."</span><span class="token punctuation">)</span><span class="token keyword">elif</span> room <span class="token operator">==</span> <span class="token string">"bed"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"looking around in the bedroom."</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"looking around elsewhere."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>looking around in the bedroom.</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># if-elif-else construct for area</span><span class="token keyword">if</span> area <span class="token operator">></span> <span class="token number">15</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"big place!"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> area<span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"medium size, nice!"</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pretty small."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>pretty small.</code></pre><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># area variables (in square meters)</span>hall <span class="token operator">=</span> <span class="token number">11.25</span>kit <span class="token operator">=</span> <span class="token number">18.0</span>liv <span class="token operator">=</span> <span class="token number">20.0</span>bed <span class="token operator">=</span> <span class="token number">10.75</span>bath <span class="token operator">=</span> <span class="token number">9.50</span><span class="token comment" spellcheck="true"># Create list areas</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span>hall<span class="token punctuation">,</span> kit<span class="token punctuation">,</span> liv<span class="token punctuation">,</span> bed<span class="token punctuation">,</span> bath<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[11.25, 18.0, 20.0, 10.75, 9.5]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Adapt list areas</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> hall<span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> kit<span class="token punctuation">,</span> <span class="token string">"living room"</span><span class="token punctuation">,</span> liv<span class="token punctuation">,</span> <span class="token string">"bedroom"</span><span class="token punctuation">,</span> bed<span class="token punctuation">,</span> <span class="token string">"bathroom"</span><span class="token punctuation">,</span> bath<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;living room&#39;, 20.0, &#39;bedroom&#39;, 10.75, &#39;bathroom&#39;, 9.5]</code></pre><h3 id="list-of-lists"><a href="#list-of-lists" class="headerlink" title="list of lists"></a>list of lists</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># area variables (in square meters)</span>hall <span class="token operator">=</span> <span class="token number">11.25</span>kit <span class="token operator">=</span> <span class="token number">18.0</span>liv <span class="token operator">=</span> <span class="token number">20.0</span>bed <span class="token operator">=</span> <span class="token number">10.75</span>bath <span class="token operator">=</span> <span class="token number">9.50</span><span class="token comment" spellcheck="true"># house information as list of lists</span>house <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> hall<span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token string">"kitchen"</span><span class="token punctuation">,</span> kit<span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token string">"living room"</span><span class="token punctuation">,</span> liv<span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token string">"bedroom"</span><span class="token punctuation">,</span> bed<span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token string">"bathroom"</span><span class="token punctuation">,</span> bath<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out house</span><span class="token keyword">print</span><span class="token punctuation">(</span>house<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out the type of house</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>house<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[&#39;hallway&#39;, 11.25], [&#39;kitchen&#39;, 18.0], [&#39;living room&#39;, 20.0], [&#39;bedroom&#39;, 10.75], [&#39;bathroom&#39;, 9.5]]&lt;class &#39;list&#39;&gt;</code></pre><h3 id="subsetting-lists"><a href="#subsetting-lists" class="headerlink" title="subsetting lists"></a>subsetting lists</h3><ul><li>python index starts with 0</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create the areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token string">"living room"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out second element from areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out last element from areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out the area of the living room</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>11.259.520.0</code></pre><h3 id="Subset-and-calculate"><a href="#Subset-and-calculate" class="headerlink" title="Subset and calculate"></a>Subset and calculate</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create the areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token string">"living room"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Sum of kitchen and bedroom area: eat_sleep_area</span>eat_sleep_area <span class="token operator">=</span> areas<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> areas<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print the variable eat_sleep_area</span><span class="token keyword">print</span><span class="token punctuation">(</span>eat_sleep_area<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>28.75</code></pre><h3 id="Slicing-and-dicing"><a href="#Slicing-and-dicing" class="headerlink" title="Slicing and dicing"></a>Slicing and dicing</h3><ul><li>include left, exclude right</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create the areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token string">"living room"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Use slicing to create downstairs</span>downstairs <span class="token operator">=</span> areas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Use slicing to create upstairs</span>upstairs <span class="token operator">=</span> areas<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out downstairs and upstairs</span><span class="token keyword">print</span><span class="token punctuation">(</span>downstairs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>upstairs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;living room&#39;, 20.0][&#39;bedroom&#39;, 10.75, &#39;bathroom&#39;, 9.5]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Alternative slicing to create downstairs</span>downstairs <span class="token operator">=</span> areas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Alternative slicing to create upstairs</span>upstairs <span class="token operator">=</span> areas<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>g[&#39;g&#39;, &#39;h&#39;]</code></pre><h3 id="list-manipulation"><a href="#list-manipulation" class="headerlink" title="list manipulation"></a>list manipulation</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create the areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token string">"living room"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;chill zone&#39;, 20.0, &#39;bedroom&#39;, 10.75, &#39;bathroom&#39;, 10.5]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Correct the bathroom area</span>areas<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10.50</span><span class="token comment" spellcheck="true"># Change "living room" to "chill zone"</span>areas<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"chill zone"</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;chill zone&#39;, 20.0, &#39;bedroom&#39;, 10.75, &#39;bathroom&#39;, 10.5]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create the areas list (updated version)</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token string">"chill zone"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span>         <span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">10.50</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Add poolhouse data to areas, new list is areas_1</span>areas_1 <span class="token operator">=</span> areas <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">"poolhouse"</span><span class="token punctuation">,</span> <span class="token number">24.5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas_1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;chill zone&#39;, 20.0, &#39;bedroom&#39;, 10.75, &#39;bathroom&#39;, 10.5, &#39;poolhouse&#39;, 24.5]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Add garage data to areas_1, new list is areas_2</span>areas_2 <span class="token operator">=</span> areas_1 <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">"garage"</span><span class="token punctuation">,</span> <span class="token number">15.45</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas_2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;chill zone&#39;, 20.0, &#39;bedroom&#39;, 10.75, &#39;bathroom&#39;, 10.5, &#39;poolhouse&#39;, 24.5, &#39;garage&#39;, 15.45]</code></pre><pre class="line-numbers language-python"><code class="language-python">areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span>        <span class="token string">"chill zone"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span>         <span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">10.50</span><span class="token punctuation">,</span> <span class="token string">"poolhouse"</span><span class="token punctuation">,</span> <span class="token number">24.5</span><span class="token punctuation">,</span>         <span class="token string">"garage"</span><span class="token punctuation">,</span> <span class="token number">15.45</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;chill zone&#39;, 20.0, &#39;bedroom&#39;, 10.75, &#39;bathroom&#39;, 10.5, &#39;garage&#39;, 15.45]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">del</span><span class="token punctuation">(</span>areas<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[&#39;hallway&#39;, 11.25, &#39;kitchen&#39;, 18.0, &#39;chill zone&#39;, 20.0, &#39;bathroom&#39;, 10.5]</code></pre><h3 id="Inner-workings-of-lists"><a href="#Inner-workings-of-lists" class="headerlink" title="Inner workings of lists"></a>Inner workings of lists</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create list areas</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Create areas_copy</span>areas_copy <span class="token operator">=</span> areas<span class="token comment" spellcheck="true"># Change areas_copy</span>areas_copy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5.0</span><span class="token comment" spellcheck="true"># Print areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[5.0, 18.0, 20.0, 10.75, 9.5]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create list areas</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Create areas_copy</span>areas_copy <span class="token operator">=</span> list<span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Change areas_copy</span>areas_copy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5.0</span><span class="token comment" spellcheck="true"># Print areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[11.25, 18.0, 20.0, 10.75, 9.5]</code></pre><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create variables var1 and var2</span>var1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>var2 <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out type of var1</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out length of var1</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Convert var2 to an integer: out2</span>out2 <span class="token operator">=</span> int<span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>out2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;list&#39;&gt;41</code></pre><pre class="line-numbers language-python"><code class="language-python">help<span class="token punctuation">(</span>max<span class="token punctuation">)</span>?max<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Help on built-in function max in module builtins:max(...)    max(iterable, *[, default=obj, key=func]) -&gt; value    max(arg1, arg2, *args, *[, key=func]) -&gt; value    With a single iterable argument, return its biggest item. The    default keyword-only argument specifies an object to return if    the provided iterable is empty.    With two or more arguments, return the largest argument.</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create lists first and second</span>first <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">]</span>second <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Paste together first and second: full</span>full <span class="token operator">=</span> first <span class="token operator">+</span> second<span class="token keyword">print</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[11.25, 18.0, 20.0, 10.75, 9.5]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Sort full in descending order: full_sorted</span>full_sorted <span class="token operator">=</span> sorted<span class="token punctuation">(</span>full<span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out full_sorted</span><span class="token keyword">print</span><span class="token punctuation">(</span>full_sorted<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[20.0, 18.0, 11.25, 10.75, 9.5]</code></pre><h2 id="Object-and-method"><a href="#Object-and-method" class="headerlink" title="Object and method"></a>Object and method</h2><ul><li>In python, everything is an object and an object has methods associated with</li><li>Methods: functions that belong to objects</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># string to experiment with: place</span>place <span class="token operator">=</span> <span class="token string">"poolhouse"</span><span class="token comment" spellcheck="true"># Use upper() on place: place_up</span>place_up <span class="token operator">=</span> place<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out place and place_up</span><span class="token keyword">print</span><span class="token punctuation">(</span>place<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>place_up<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out the number of o's in place</span><span class="token keyword">print</span><span class="token punctuation">(</span>place<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>poolhousePOOLHOUSE3</code></pre><h2 id="List-Methods"><a href="#List-Methods" class="headerlink" title="List Methods"></a>List Methods</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create list areas</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print out the index of the element 20.0</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out how often 9.50 appears in areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">9.50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>21</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create list areas</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Use append twice to add poolhouse and garage size</span>areas<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">24.5</span><span class="token punctuation">)</span>areas<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">15.45</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out areas</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[11.25, 18.0, 20.0, 10.75, 9.5, 24.5, 15.45]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Reverse the orders of the elements in areas</span>areas<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[15.45, 24.5, 9.5, 10.75, 20.0, 18.0, 11.25]</code></pre><h2 id="packages-directory-of-python-scripts"><a href="#packages-directory-of-python-scripts" class="headerlink" title="packages: directory of python scripts"></a>packages: directory of python scripts</h2><ul><li>Each script = module</li><li>Specify functions, methods, types</li><li>Thousands of packages available</li><li>Numpy</li><li>Matplotlib</li><li>Scikit-learn</li></ul><h3 id="Import-package"><a href="#Import-package" class="headerlink" title="Import package"></a>Import package</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Import the math package</span><span class="token keyword">import</span> math<span class="token comment" spellcheck="true"># Definition of radius</span>r <span class="token operator">=</span> <span class="token number">0.43</span><span class="token comment" spellcheck="true"># Calculate C</span>C <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> r <span class="token operator">*</span> math<span class="token punctuation">.</span>pi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Calculate A</span>A <span class="token operator">=</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># Build printout</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Circumference: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Area: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Circumference: 2.701769682087222Area: 0.5808804816487527</code></pre><h3 id="Selective-import"><a href="#Selective-import" class="headerlink" title="Selective import"></a>Selective import</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Import radians function of math package</span><span class="token keyword">from</span> math <span class="token keyword">import</span> radians<span class="token comment" spellcheck="true"># Definition of radius</span>r <span class="token operator">=</span> <span class="token number">192500</span><span class="token comment" spellcheck="true"># Travel distance of Moon over 12 degrees. Store in dist.</span>dist <span class="token operator">=</span> r <span class="token operator">*</span> radians<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out dist</span><span class="token keyword">print</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>40317.10572106901</code></pre><h2 id="Numeric-Python"><a href="#Numeric-Python" class="headerlink" title="Numeric Python"></a>Numeric Python</h2><ul><li>Alternative to Python List: NumPy Array</li><li>Calculations over entire arrays</li><li>Easy and Fast </li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create arrays</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npmy_house   <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span>your_house <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">14.0</span><span class="token punctuation">,</span> <span class="token number">24.0</span><span class="token punctuation">,</span> <span class="token number">14.25</span><span class="token punctuation">,</span> <span class="token number">9.0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">np_my_house <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>my_house<span class="token punctuation">)</span>np_your_house <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>your_house<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># my_house greater than or equal to 18</span><span class="token keyword">print</span><span class="token punctuation">(</span>np_my_house<span class="token operator">>=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># my_house less than your_house</span><span class="token keyword">print</span><span class="token punctuation">(</span>np_my_house<span class="token operator">&lt;</span>np_your_house<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[ True  True False False][False  True  True False]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out type of my house</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_house<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>my_house<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[18.0, 20.0, 10.75, 9.5]&lt;class &#39;list&#39;&gt;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np_my_house<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>np_my_house<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[18.   20.   10.75  9.5 ]&lt;class &#39;numpy.ndarray&#39;&gt;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># height is available as a regular list</span>height_in<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create a numpy array from height_in: np_height_in</span>np_height_in <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>height_in<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out np_height_in</span><span class="token keyword">print</span><span class="token punctuation">(</span>np_height_in<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Convert np_height to m: np_height_m</span>np_height_m <span class="token operator">=</span> np_height_in <span class="token operator">*</span> <span class="token number">0.0254</span><span class="token comment" spellcheck="true"># Print np_height_m</span><span class="token keyword">print</span><span class="token punctuation">(</span>np_height_m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[74 74 72 72 73 69 69 71][1.8796 1.8796 1.8288 1.8288 1.8542 1.7526 1.7526 1.8034]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># height and weight are available as regular lists</span>weight_lb <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">208</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create array from height_in with metric units: np_height_m</span>np_height_m <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>height_in<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.0254</span><span class="token comment" spellcheck="true"># Create array from weight_lb with metric units: np_weight_kg</span>np_weight_kg <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>weight_lb<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.453592</span><span class="token comment" spellcheck="true"># Calculate the BMI: bmi</span>bmi <span class="token operator">=</span> np_weight_kg <span class="token operator">/</span> np_height_m <span class="token operator">**</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># Print out bmi</span><span class="token keyword">print</span><span class="token punctuation">(</span>bmi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[26.70532383 28.88797049 25.76834706 30.51514784 24.40753727 26.58105883 24.3659706  12.55231314]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create the light array</span>light <span class="token operator">=</span> bmi <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token comment" spellcheck="true"># Print out light</span><span class="token keyword">print</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out BMIs of all baseball players whose BMI is below 21</span><span class="token keyword">print</span><span class="token punctuation">(</span>bmi<span class="token punctuation">[</span>light<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[False False False False False False False  True][12.55231314]</code></pre><h3 id="NumPy-Side-Effects"><a href="#NumPy-Side-Effects" class="headerlink" title="NumPy Side Effects"></a>NumPy Side Effects</h3><p>If you compare its functionality with regular Python lists, however, some things have changed.</p><ul><li>Numpy arrays cannot contain elements with different types. If you try to build such a list, some of the elements’ types are changed to end up with a homogeneous list. This is known as type coercion.</li><li>The typical arithmetic operators, such as +, -, * and / have a different meaning for regular Python lists and numpy arrays.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create baseball, a list of lists</span>baseball <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">78.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">102.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">98.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">,</span> <span class="token number">75.2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Create a 2D numpy array from baseball: np_baseball</span>np_baseball <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>baseball<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out the type of np_baseball</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>np_baseball<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out the shape of np_baseball</span><span class="token keyword">print</span><span class="token punctuation">(</span>np_baseball<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;numpy.ndarray&#39;&gt;(4, 2)</code></pre><pre class="line-numbers language-python"><code class="language-python">np_baseball<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([180., 215., 210., 188.])</code></pre><h3 id="NumPy-Basic-Statistics"><a href="#NumPy-Basic-Statistics" class="headerlink" title="NumPy: Basic Statistics"></a>NumPy: Basic Statistics</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create np_height_in from np_baseball</span>np_height_in <span class="token operator">=</span> np_baseball<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print out the mean of np_height_in</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np_height_in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out the median of np_height_in</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>np_height_in<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>198.25199.0</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print mean height (first column)</span>avg <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np_baseball<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Average: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>avg<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Average: 198.25</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print median height. Replace 'None'</span>med <span class="token operator">=</span> np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>np_baseball<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Median: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>med<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Median: 199.0</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out the standard deviation on height. Replace 'None'</span>stddev <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>np_baseball<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Standard Deviation: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>stddev<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Standard Deviation: 14.635146053251399</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out correlation between first and second column. Replace 'None'</span>corr <span class="token operator">=</span> np<span class="token punctuation">.</span>corrcoef<span class="token punctuation">(</span>np_baseball<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> np_baseball<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Correlation: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>corr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Correlation: [[1.         0.95865738] [0.95865738 1.        ]]</code></pre><h2 id="Index-and-value"><a href="#Index-and-value" class="headerlink" title="Index and value"></a>Index and value</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of countries and capital</span>countries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'spain'</span><span class="token punctuation">,</span> <span class="token string">'france'</span><span class="token punctuation">,</span> <span class="token string">'germany'</span><span class="token punctuation">,</span> <span class="token string">'norway'</span><span class="token punctuation">]</span>capitals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'madrid'</span><span class="token punctuation">,</span> <span class="token string">'paris'</span><span class="token punctuation">,</span> <span class="token string">'berlin'</span><span class="token punctuation">,</span> <span class="token string">'oslo'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Get index of 'germany': ind_ger</span>ind_ger <span class="token operator">=</span> countries<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'germany'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Use ind_ger to print out capital of Germany</span><span class="token keyword">print</span><span class="token punctuation">(</span>capitals<span class="token punctuation">[</span>ind_ger<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>berlin</code></pre><h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of dictionary</span>europe <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'spain'</span><span class="token punctuation">:</span><span class="token string">'madrid'</span><span class="token punctuation">,</span> <span class="token string">'france'</span><span class="token punctuation">:</span><span class="token string">'paris'</span><span class="token punctuation">,</span> <span class="token string">'germany'</span><span class="token punctuation">:</span><span class="token string">'berlin'</span><span class="token punctuation">,</span> <span class="token string">'norway'</span><span class="token punctuation">:</span><span class="token string">'oslo'</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out the keys in europe</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out value that belongs to key 'norway'</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">[</span><span class="token string">'norway'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>dict_keys([&#39;spain&#39;, &#39;france&#39;, &#39;germany&#39;, &#39;norway&#39;])oslo</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of dictionary</span>europe <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'spain'</span><span class="token punctuation">:</span><span class="token string">'madrid'</span><span class="token punctuation">,</span> <span class="token string">'france'</span><span class="token punctuation">:</span><span class="token string">'paris'</span><span class="token punctuation">,</span> <span class="token string">'germany'</span><span class="token punctuation">:</span><span class="token string">'berlin'</span><span class="token punctuation">,</span> <span class="token string">'norway'</span><span class="token punctuation">:</span><span class="token string">'oslo'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Add italy to europe</span>europe<span class="token punctuation">[</span><span class="token string">'italy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'rome'</span><span class="token comment" spellcheck="true"># Print out italy in europe</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'italy'</span> <span class="token keyword">in</span> europe<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python"><code class="language-python">europe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>{&#39;spain&#39;: &#39;madrid&#39;, &#39;france&#39;: &#39;paris&#39;, &#39;germany&#39;: &#39;berlin&#39;, &#39;norway&#39;: &#39;oslo&#39;, &#39;italy&#39;: &#39;rome&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Add poland to europe</span>europe<span class="token punctuation">[</span><span class="token string">'poland'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'warsaw'</span><span class="token comment" spellcheck="true"># Print europe</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;spain&#39;: &#39;madrid&#39;, &#39;france&#39;: &#39;paris&#39;, &#39;germany&#39;: &#39;berlin&#39;, &#39;norway&#39;: &#39;oslo&#39;, &#39;italy&#39;: &#39;rome&#39;, &#39;poland&#39;: &#39;warsaw&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of dictionary</span>europe <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'spain'</span><span class="token punctuation">:</span><span class="token string">'madrid'</span><span class="token punctuation">,</span> <span class="token string">'france'</span><span class="token punctuation">:</span><span class="token string">'paris'</span><span class="token punctuation">,</span> <span class="token string">'germany'</span><span class="token punctuation">:</span><span class="token string">'bonn'</span><span class="token punctuation">,</span>          <span class="token string">'norway'</span><span class="token punctuation">:</span><span class="token string">'oslo'</span><span class="token punctuation">,</span> <span class="token string">'italy'</span><span class="token punctuation">:</span><span class="token string">'rome'</span><span class="token punctuation">,</span> <span class="token string">'poland'</span><span class="token punctuation">:</span><span class="token string">'warsaw'</span><span class="token punctuation">,</span>          <span class="token string">'australia'</span><span class="token punctuation">:</span><span class="token string">'vienna'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Print europe</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Update capital of germany</span>europe<span class="token punctuation">[</span><span class="token string">'germany'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'berlin'</span><span class="token comment" spellcheck="true"># Print europe</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;spain&#39;: &#39;madrid&#39;, &#39;france&#39;: &#39;paris&#39;, &#39;germany&#39;: &#39;bonn&#39;, &#39;norway&#39;: &#39;oslo&#39;, &#39;italy&#39;: &#39;rome&#39;, &#39;poland&#39;: &#39;warsaw&#39;, &#39;australia&#39;: &#39;vienna&#39;}{&#39;spain&#39;: &#39;madrid&#39;, &#39;france&#39;: &#39;paris&#39;, &#39;germany&#39;: &#39;berlin&#39;, &#39;norway&#39;: &#39;oslo&#39;, &#39;italy&#39;: &#39;rome&#39;, &#39;poland&#39;: &#39;warsaw&#39;, &#39;australia&#39;: &#39;vienna&#39;}</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Remove australia</span><span class="token keyword">del</span><span class="token punctuation">(</span>europe<span class="token punctuation">[</span><span class="token string">'australia'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print europe</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;spain&#39;: &#39;madrid&#39;, &#39;france&#39;: &#39;paris&#39;, &#39;germany&#39;: &#39;berlin&#39;, &#39;norway&#39;: &#39;oslo&#39;, &#39;italy&#39;: &#39;rome&#39;, &#39;poland&#39;: &#39;warsaw&#39;}</code></pre><h3 id="Dictionary-of-dictionaries"><a href="#Dictionary-of-dictionaries" class="headerlink" title="Dictionary of dictionaries"></a>Dictionary of dictionaries</h3><pre class="line-numbers language-python"><code class="language-python">europe <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'spain'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'capital'</span><span class="token punctuation">:</span><span class="token string">'madrid'</span><span class="token punctuation">,</span> <span class="token string">'population'</span><span class="token punctuation">:</span><span class="token number">46.77</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token string">'france'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'capital'</span><span class="token punctuation">:</span><span class="token string">'paris'</span><span class="token punctuation">,</span> <span class="token string">'population'</span><span class="token punctuation">:</span><span class="token number">66.03</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token string">'germany'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'capital'</span><span class="token punctuation">:</span><span class="token string">'berlin'</span><span class="token punctuation">,</span> <span class="token string">'population'</span><span class="token punctuation">:</span><span class="token number">80.62</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token string">'norway'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'capital'</span><span class="token punctuation">:</span><span class="token string">'oslo'</span><span class="token punctuation">,</span> <span class="token string">'population'</span><span class="token punctuation">:</span><span class="token number">5.084</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Print out the capital of France</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">[</span><span class="token string">'france'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'capital'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>paris</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create sub-dictionary data</span>data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'capital'</span><span class="token punctuation">:</span><span class="token string">'rome'</span><span class="token punctuation">,</span> <span class="token string">'population'</span><span class="token punctuation">:</span><span class="token number">59.83</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Add data to europe under key 'italy'</span>europe<span class="token punctuation">[</span><span class="token string">'italy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token comment" spellcheck="true"># Print europe</span><span class="token keyword">print</span><span class="token punctuation">(</span>europe<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;spain&#39;: {&#39;capital&#39;: &#39;madrid&#39;, &#39;population&#39;: 46.77}, &#39;france&#39;: {&#39;capital&#39;: &#39;paris&#39;, &#39;population&#39;: 66.03}, &#39;germany&#39;: {&#39;capital&#39;: &#39;berlin&#39;, &#39;population&#39;: 80.62}, &#39;norway&#39;: {&#39;capital&#39;: &#39;oslo&#39;, &#39;population&#39;: 5.084}, &#39;italy&#39;: {&#39;capital&#39;: &#39;rome&#39;, &#39;population&#39;: 59.83}}</code></pre><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p>Pandas is the building block and fundation of data science with Python, we cover some basics here and a seperate class with pandas will follow.</p><ul><li>dictionary is very useful, you can think of keys as data columns, and values as the content of each column.</li><li>let us build a pandas dataframe from a dictionary</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment" spellcheck="true"># Build cars DataFrame</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'United States'</span><span class="token punctuation">,</span> <span class="token string">'Australia'</span><span class="token punctuation">,</span> <span class="token string">'Japan'</span><span class="token punctuation">,</span> <span class="token string">'India'</span><span class="token punctuation">,</span> <span class="token string">'Russia'</span><span class="token punctuation">,</span> <span class="token string">'Morocco'</span><span class="token punctuation">,</span> <span class="token string">'Egypt'</span><span class="token punctuation">]</span>dr <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span>cpc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">809</span><span class="token punctuation">,</span> <span class="token number">731</span><span class="token punctuation">,</span> <span class="token number">588</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'country'</span><span class="token punctuation">:</span>names<span class="token punctuation">,</span> <span class="token string">'drives_right'</span><span class="token punctuation">:</span>dr<span class="token punctuation">,</span> <span class="token string">'cars_per_cap'</span><span class="token punctuation">:</span>cpc <span class="token punctuation">}</span>cars <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>         country  drives_right  cars_per_cap0  United States          True           8091      Australia         False           7312          Japan         False           5883          India         False            184         Russia          True           2005        Morocco          True            706          Egypt          True            45</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of row_labels</span>row_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'US'</span><span class="token punctuation">,</span> <span class="token string">'AUS'</span><span class="token punctuation">,</span> <span class="token string">'JAP'</span><span class="token punctuation">,</span> <span class="token string">'IN'</span><span class="token punctuation">,</span> <span class="token string">'RU'</span><span class="token punctuation">,</span> <span class="token string">'MOR'</span><span class="token punctuation">,</span> <span class="token string">'EG'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Specify row labels of cars</span>cars<span class="token punctuation">.</span>index <span class="token operator">=</span> row_labels<span class="token comment" spellcheck="true"># Print cars again</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>           country  drives_right  cars_per_capUS   United States          True           809AUS      Australia         False           731JAP          Japan         False           588IN           India         False            18RU          Russia          True           200MOR        Morocco          True            70EG           Egypt          True            45</code></pre><ul><li>Here, we have index for each row, which is like the label/name of the row, we can access/slice data using the index</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out country column as Pandas Series</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>US     United StatesAUS        AustraliaJAP            JapanIN             IndiaRU            RussiaMOR          MoroccoEG             EgyptName: country, dtype: object</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out country column as Pandas DataFrame</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>           countryUS   United StatesAUS      AustraliaJAP          JapanIN           IndiaRU          RussiaMOR        MoroccoEG           Egypt</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out DataFrame with country and drives_right columns</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>           country  drives_rightUS   United States          TrueAUS      Australia         FalseJAP          Japan         FalseIN           India         FalseRU          Russia          TrueMOR        Morocco          TrueEG           Egypt          True</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out first 3 observations</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>           country  drives_right  cars_per_capUS   United States          True           809AUS      Australia         False           731JAP          Japan         False           588</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out fourth, fifth and sixth observation</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>     country  drives_right  cars_per_capIN     India         False            18RU    Russia          True           200MOR  Morocco          True            70</code></pre><h2 id="loc-and-iloc"><a href="#loc-and-iloc" class="headerlink" title="loc and iloc"></a>loc and iloc</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out observation for Japan</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'JAP'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>country         Japandrives_right    Falsecars_per_cap      588Name: JAP, dtype: object</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out observations for Australia and Egypt</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'AUS'</span><span class="token punctuation">,</span> <span class="token string">'EG'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>       country  drives_right  cars_per_capAUS  Australia         False           731EG       Egypt          True            45</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'IN'</span><span class="token punctuation">,</span> <span class="token string">'cars_per_cap'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>18</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out drives_right value of Morocco</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'MOR'</span><span class="token punctuation">,</span> <span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print sub-DataFrame</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'RU'</span><span class="token punctuation">,</span> <span class="token string">'MOR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>     country  drives_rightRU    Russia          TrueMOR  Morocco          True</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out drives_right column as Series</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>US      TrueAUS    FalseJAP    FalseIN     FalseRU      TrueMOR     TrueEG      TrueName: drives_right, dtype: bool</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>US      TrueAUS    FalseJAP    FalseIN     FalseRU      TrueMOR     TrueEG      TrueName: drives_right, dtype: bool</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out drives_right column as DataFrame</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>     drives_rightUS           TrueAUS         FalseJAP         FalseIN          FalseRU           TrueMOR          TrueEG           True</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>     drives_rightUS           TrueAUS         FalseJAP         FalseIN          FalseRU           TrueMOR          TrueEG           True</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>cars<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.series.Series&#39;&gt;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>cars<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Print out cars_per_cap and drives_right as DataFrame</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">'cars_per_cap'</span><span class="token punctuation">,</span> <span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>     cars_per_cap  drives_rightUS            809          TrueAUS           731         FalseJAP           588         FalseIN             18         FalseRU            200          TrueMOR            70          TrueEG             45          True</code></pre><h3 id="Filtering-Pandas-DataFrame"><a href="#Filtering-Pandas-DataFrame" class="headerlink" title="Filtering Pandas DataFrame"></a>Filtering Pandas DataFrame</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Extract drives_right column as Series: dr</span>dr <span class="token operator">=</span> cars<span class="token punctuation">[</span><span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">True</span><span class="token comment" spellcheck="true"># Use dr to subset cars: sel</span>sel <span class="token operator">=</span> cars<span class="token punctuation">[</span>dr<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print sel</span><span class="token keyword">print</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>           country  drives_right  cars_per_capUS   United States          True           809RU          Russia          True           200MOR        Morocco          True            70EG           Egypt          True            45</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Convert code to a one-liner</span>sel <span class="token operator">=</span> cars<span class="token punctuation">[</span>cars<span class="token punctuation">[</span><span class="token string">'drives_right'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">True</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print sel</span><span class="token keyword">print</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>           country  drives_right  cars_per_capUS   United States          True           809RU          Russia          True           200MOR        Morocco          True            70EG           Egypt          True            45</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Create car_maniac: observations that have a cars_per_cap over 500</span>car_maniac <span class="token operator">=</span> cars<span class="token punctuation">[</span>cars<span class="token punctuation">[</span><span class="token string">'cars_per_cap'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">500</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print car_maniac</span><span class="token keyword">print</span><span class="token punctuation">(</span>car_maniac<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>           country  drives_right  cars_per_capUS   United States          True           809AUS      Australia         False           731JAP          Japan         False           588</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># Create medium: observations with cars_per_cap between 100 and 500</span>medium <span class="token operator">=</span> cars<span class="token punctuation">[</span>np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token string">'cars_per_cap'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">100</span><span class="token punctuation">,</span> cars<span class="token punctuation">[</span><span class="token string">'cars_per_cap'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Print medium</span><span class="token keyword">print</span><span class="token punctuation">(</span>medium<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>   country  drives_right  cars_per_capRU  Russia          True           200</code></pre><h2 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h2><h3 id="While-loop"><a href="#While-loop" class="headerlink" title="While loop"></a>While loop</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Initialize offset</span>offset <span class="token operator">=</span> <span class="token number">8</span><span class="token comment" spellcheck="true"># Code the while loop</span><span class="token keyword">while</span> offset <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"correcting..."</span><span class="token punctuation">)</span>    offset <span class="token operator">=</span> offset <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>correcting...7correcting...6correcting...5correcting...4correcting...3correcting...2correcting...1correcting...0</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Add conditionals</span><span class="token comment" spellcheck="true"># Initialize offset</span>offset <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6</span><span class="token comment" spellcheck="true"># Code the while loop</span><span class="token keyword">while</span> offset <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"correcting..."</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> offset <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        offset <span class="token operator">=</span> offset <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        offset <span class="token operator">=</span> offset <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>correcting...-5correcting...-4correcting...-3correcting...-2correcting...-1correcting...0</code></pre><h3 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Code the for loop</span><span class="token keyword">for</span> i <span class="token keyword">in</span> areas<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>11.2518.020.010.759.5</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Change for loop to use enumerate() and update print()</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> size <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>areas<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"room "</span><span class="token operator">+</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>room 0: 11.25room 1: 18.0room 2: 20.0room 3: 10.75room 4: 9.5</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># areas list</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11.25</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Code the for loop</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> area <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>areas<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"room "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>room 1: 11.25room 2: 18.0room 3: 20.0room 4: 10.75room 5: 9.5</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># house list of lists</span>house <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"hallway"</span><span class="token punctuation">,</span> <span class="token number">11.25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token string">"kitchen"</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token string">"living room"</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token string">"bedroom"</span><span class="token punctuation">,</span> <span class="token number">10.75</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token string">"bathroom"</span><span class="token punctuation">,</span> <span class="token number">9.50</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Build a for loop from scratch</span><span class="token keyword">for</span> i <span class="token keyword">in</span> house<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" is"</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" sqm"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>the hallway is 11.25 sqmthe kitchen is 18.0 sqmthe living room is 20.0 sqmthe bedroom is 10.75 sqmthe bathroom is 9.5 sqm</code></pre><h3 id="Loop-over-dictionary"><a href="#Loop-over-dictionary" class="headerlink" title="Loop over dictionary"></a>Loop over dictionary</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition of dictionary</span>europe <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'spain'</span><span class="token punctuation">:</span><span class="token string">'madrid'</span><span class="token punctuation">,</span> <span class="token string">'france'</span><span class="token punctuation">:</span><span class="token string">'paris'</span><span class="token punctuation">,</span> <span class="token string">'germany'</span><span class="token punctuation">:</span><span class="token string">'berlin'</span><span class="token punctuation">,</span>          <span class="token string">'norway'</span><span class="token punctuation">:</span><span class="token string">'oslo'</span><span class="token punctuation">,</span> <span class="token string">'italy'</span><span class="token punctuation">:</span><span class="token string">'rome'</span><span class="token punctuation">,</span> <span class="token string">'poland'</span><span class="token punctuation">:</span><span class="token string">'warsaw'</span><span class="token punctuation">,</span> <span class="token string">'austria'</span><span class="token punctuation">:</span><span class="token string">'vienna'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Iterate over europe</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> europe<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"the capital of "</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">" is "</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>the capital of spain is madridthe capital of france is paristhe capital of germany is berlinthe capital of norway is oslothe capital of italy is romethe capital of poland is warsawthe capital of austria is vienna</code></pre><h3 id="Loop-over-data-frame-by-rows"><a href="#Loop-over-data-frame-by-rows" class="headerlink" title="Loop over data frame by rows:"></a>Loop over data frame by rows:</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Iterate over rows of cars</span><span class="token keyword">for</span> lab<span class="token punctuation">,</span> row <span class="token keyword">in</span> cars<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lab<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>UScountry         United Statesdrives_right             Truecars_per_cap              809Name: US, dtype: objectAUScountry         Australiadrives_right        Falsecars_per_cap          731Name: AUS, dtype: objectJAPcountry         Japandrives_right    Falsecars_per_cap      588Name: JAP, dtype: objectINcountry         Indiadrives_right    Falsecars_per_cap       18Name: IN, dtype: objectRUcountry         Russiadrives_right      Truecars_per_cap       200Name: RU, dtype: objectMORcountry         Moroccodrives_right       Truecars_per_cap         70Name: MOR, dtype: objectEGcountry         Egyptdrives_right     Truecars_per_cap       45Name: EG, dtype: object</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Adapt for loop</span><span class="token keyword">for</span> lab<span class="token punctuation">,</span> row <span class="token keyword">in</span> cars<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lab <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'cars_per_cap'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>US: 809AUS: 731JAP: 588IN: 18RU: 200MOR: 70EG: 45</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Code for loop that adds COUNTRY column</span><span class="token keyword">for</span> lab<span class="token punctuation">,</span> row <span class="token keyword">in</span> cars<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    cars<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>lab<span class="token punctuation">,</span> <span class="token string">"COUNTRY"</span><span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">"country"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print cars</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>           country  drives_right  cars_per_cap        COUNTRYUS   United States          True           809  UNITED STATESAUS      Australia         False           731      AUSTRALIAJAP          Japan         False           588          JAPANIN           India         False            18          INDIARU          Russia          True           200         RUSSIAMOR        Morocco          True            70        MOROCCOEG           Egypt          True            45          EGYPT</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Use .apply(str.upper)</span>cars<span class="token punctuation">[</span><span class="token string">"COUNTRY"</span><span class="token punctuation">]</span> <span class="token operator">=</span> cars<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>str<span class="token punctuation">.</span>upper<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>           country  drives_right  cars_per_cap        COUNTRYUS   United States          True           809  UNITED STATESAUS      Australia         False           731      AUSTRALIAJAP          Japan         False           588          JAPANIN           India         False            18          INDIARU          Russia          True           200         RUSSIAMOR        Morocco          True            70        MOROCCOEG           Egypt          True            45          EGYPT</code></pre><h2 id="Wrap-up-with-a-case-study"><a href="#Wrap-up-with-a-case-study" class="headerlink" title="Wrap up with a case study"></a>Wrap up with a case study</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Import numpy as np</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># Set the seed</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Generate and print random float</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.6964691855978616</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Set the seed</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Use randint() to simulate a dice</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Use randint() again</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>63</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Set the seed</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Starting step</span>step <span class="token operator">=</span> <span class="token number">50</span><span class="token comment" spellcheck="true"># Roll the dice</span>dice <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Finish the control construct</span><span class="token keyword">if</span> dice <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token punctuation">:</span>    step <span class="token operator">=</span> step <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">elif</span> dice <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>    step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    step <span class="token operator">=</span> step <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print out dice and step</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>dice<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token operator">+</span> str<span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>6 53</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Set the seed</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Initialize random_walk</span>random_walk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Set step: last element in random_walk</span>    step <span class="token operator">=</span> random_walk<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Roll the dice</span>    dice <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Determine next step</span>    <span class="token keyword">if</span> dice <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>        step <span class="token operator">=</span> step <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">elif</span> dice <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>        step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        step <span class="token operator">=</span> step <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># append next_step to random_walk</span>    random_walk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print random_walk</span><span class="token keyword">print</span><span class="token punctuation">(</span>random_walk<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[0, 3, 4, 5, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 0, -1, 0, 5, 4, 3, 4, 3, 4, 5, 6, 7, 8, 7, 8, 7, 8, 9, 10, 11, 10, 14, 15, 14, 15, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 32, 33, 37, 38, 37, 38, 39, 38, 39, 40, 42, 43, 44, 43, 42, 43, 44, 43, 42, 43, 44, 46, 45, 44, 45, 44, 45, 46, 47, 49, 48, 49, 50, 51, 52, 53, 52, 51, 52, 51, 52, 53, 52, 55, 56, 57, 58, 57, 58, 59]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Import matplotlib.pyplot as plt</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># Plot random_walk</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>random_walk<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Show the plot</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="basics-concepts_files/basics-concepts_156_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Initialize all_walks</span>all_walks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Simulate random walk 10 times</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Code from before</span>    random_walk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        step <span class="token operator">=</span> random_walk<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        dice <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> dice <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>            step <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> step <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> dice <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            step <span class="token operator">=</span> step <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>        random_walk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>step<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Append random_walk to all_walks</span>    all_walks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random_walk<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Print all_walks</span><span class="token keyword">print</span><span class="token punctuation">(</span>all_walks<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[0, 4, 3, 2, 4, 3, 4, 6, 7, 8, 13, 12, 13, 14, 15, 16, 17, 16, 21, 22, 23, 24, 23, 22, 21, 20, 19, 20, 21, 22, 28, 27, 26, 25, 26, 27, 28, 27, 28, 29, 28, 33, 34, 33, 32, 31, 30, 31, 30, 29, 31, 32, 35, 36, 38, 39, 40, 41, 40, 39, 40, 41, 42, 43, 42, 43, 44, 45, 48, 49, 50, 49, 50, 49, 50, 51, 52, 56, 55, 54, 55, 56, 57, 56, 57, 56, 57, 59, 64, 63, 64, 65, 66, 67, 68, 69, 68, 69, 70, 71, 73], [0, 2, 1, 2, 3, 6, 5, 6, 5, 6, 7, 8, 7, 8, 7, 8, 9, 11, 10, 9, 10, 11, 10, 12, 13, 14, 15, 16, 17, 18, 17, 18, 19, 24, 25, 24, 23, 22, 21, 22, 23, 24, 29, 30, 29, 30, 31, 32, 33, 34, 35, 34, 33, 34, 33, 39, 38, 39, 38, 39, 38, 39, 43, 47, 49, 51, 50, 51, 53, 52, 58, 59, 61, 62, 61, 62, 63, 64, 63, 64, 65, 66, 68, 67, 66, 67, 73, 78, 77, 76, 80, 81, 82, 83, 85, 84, 85, 84, 85, 84, 83], [0, 6, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 13, 12, 11, 12, 11, 12, 11, 12, 13, 17, 18, 17, 23, 22, 21, 22, 21, 20, 21, 20, 24, 23, 24, 23, 24, 23, 24, 26, 25, 24, 23, 24, 23, 28, 29, 30, 29, 28, 29, 28, 29, 28, 33, 34, 33, 32, 31, 30, 31, 32, 36, 42, 43, 44, 45, 46, 45, 46, 48, 49, 50, 51, 50, 49, 50, 49, 50, 51, 52, 51, 52, 53, 54, 53, 52, 53, 54, 59, 60, 61, 66, 65, 66, 65, 66, 67, 68, 69, 68], [0, 6, 5, 6, 5, 4, 5, 9, 10, 11, 12, 13, 12, 11, 10, 9, 8, 9, 10, 11, 12, 13, 14, 13, 14, 15, 14, 15, 16, 19, 18, 19, 18, 19, 22, 23, 24, 25, 24, 23, 26, 27, 28, 29, 28, 27, 28, 31, 32, 37, 38, 37, 38, 37, 38, 37, 43, 42, 41, 42, 44, 43, 42, 41, 42, 43, 44, 45, 49, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 65, 64, 65, 66, 65, 71, 70, 71, 72, 71, 70, 71, 70, 69, 75, 74, 73, 74, 75, 74, 73], [0, 0, 0, 1, 7, 8, 11, 12, 18, 19, 20, 26, 25, 31, 30, 31, 32, 33, 32, 38, 39, 38, 39, 38, 39, 38, 39, 38, 39, 43, 44, 46, 45, 46, 45, 44, 45, 44, 45, 44, 48, 52, 51, 50, 49, 50, 51, 55, 56, 57, 61, 60, 59, 58, 59, 60, 62, 61, 60, 61, 62, 64, 67, 72, 73, 72, 73, 74, 75, 76, 77, 76, 77, 78, 84, 83, 88, 87, 91, 90, 94, 93, 96, 97, 96, 97, 103, 102, 101, 100, 104, 103, 102, 103, 104, 103, 104, 105, 106, 107, 106], [0, 0, 0, 1, 0, 0, 4, 5, 7, 11, 17, 16, 15, 16, 17, 18, 17, 18, 17, 18, 19, 18, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 32, 35, 36, 35, 34, 35, 36, 37, 36, 35, 34, 33, 34, 35, 36, 37, 38, 39, 40, 39, 40, 41, 43, 42, 43, 44, 47, 49, 50, 49, 48, 47, 46, 45, 46, 45, 46, 48, 49, 50, 49, 50, 49, 48, 49, 48, 47, 46, 47, 46, 45, 46, 47, 48, 50, 51, 52, 51, 50, 51, 57, 56, 57, 58, 63, 62, 63], [0, 0, 1, 2, 1, 2, 3, 9, 10, 11, 12, 11, 13, 14, 15, 16, 15, 16, 17, 18, 19, 18, 19, 18, 19, 20, 19, 20, 24, 25, 28, 29, 33, 34, 33, 34, 35, 34, 33, 38, 39, 40, 39, 38, 39, 40, 41, 40, 44, 43, 44, 45, 46, 47, 48, 49, 50, 49, 48, 47, 48, 49, 53, 54, 53, 54, 55, 54, 60, 61, 62, 63, 62, 63, 64, 67, 66, 67, 66, 65, 64, 65, 66, 68, 69, 70, 74, 75, 74, 73, 74, 75, 74, 73, 74, 75, 76, 75, 74, 75, 76], [0, 1, 0, 1, 2, 1, 0, 0, 1, 2, 3, 4, 5, 10, 14, 13, 14, 13, 12, 11, 12, 11, 12, 13, 12, 16, 17, 16, 17, 16, 15, 16, 15, 19, 20, 21, 22, 23, 24, 23, 24, 25, 26, 27, 28, 27, 32, 33, 34, 33, 34, 33, 34, 35, 34, 35, 40, 41, 42, 41, 42, 43, 44, 43, 44, 43, 44, 45, 44, 43, 42, 43, 44, 43, 42, 41, 42, 46, 47, 48, 49, 50, 51, 50, 51, 52, 51, 52, 57, 58, 57, 56, 57, 56, 55, 54, 58, 59, 60, 61, 60], [0, 1, 2, 3, 4, 5, 4, 3, 6, 5, 4, 3, 2, 3, 9, 10, 9, 10, 11, 10, 9, 10, 11, 12, 11, 15, 16, 15, 17, 18, 17, 18, 19, 20, 21, 22, 23, 22, 21, 22, 23, 22, 23, 24, 23, 22, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 33, 34, 35, 36, 37, 38, 37, 36, 42, 43, 44, 43, 42, 41, 45, 46, 50, 49, 55, 56, 57, 61, 62, 61, 60, 61, 62, 63, 64, 63, 69, 70, 69, 73, 74, 73, 74, 73, 79, 85, 86, 85, 86, 87], [0, 1, 2, 3, 2, 5, 4, 6, 7, 13, 12, 13, 14, 13, 12, 13, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 25, 26, 27, 28, 27, 26, 25, 26, 25, 29, 28, 27, 28, 30, 31, 36, 35, 36, 37, 41, 40, 41, 42, 41, 40, 41, 42, 43, 42, 41, 40, 41, 40, 39, 40, 39, 38, 37, 38, 39, 38, 37, 36, 37, 38, 39, 38, 37, 38, 39, 40, 41, 40, 41, 40, 41, 42, 43, 44, 45, 50, 55, 54, 55, 56, 55, 56, 62, 61, 62]]</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Convert all_walks to Numpy array: np_aw</span>np_aw <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>all_walks<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot np_aw and show</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np_aw<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Clear the figure</span>plt<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="basics-concepts_files/basics-concepts_158_0.png" alt="png"></p><pre><code>&lt;Figure size 432x288 with 0 Axes&gt;</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Transpose np_aw: np_aw_t</span>np_aw_t <span class="token operator">=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>np_aw<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot np_aw_t and show</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np_aw_t<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="basics-concepts_files/basics-concepts_159_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Implement clumsiness</span><span class="token comment" spellcheck="true"># numpy and matplotlib imported, seed set</span><span class="token comment" spellcheck="true"># Simulate random walk 250 times</span>all_walks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    random_walk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        step <span class="token operator">=</span> random_walk<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        dice <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> dice <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>            step <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> step <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> dice <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            step <span class="token operator">=</span> step <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Implement clumsiness</span>        <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span> <span class="token number">0.001</span> <span class="token punctuation">:</span>            step <span class="token operator">=</span> <span class="token number">0</span>        random_walk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>step<span class="token punctuation">)</span>    all_walks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random_walk<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Create and plot np_aw_t</span>np_aw_t <span class="token operator">=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>all_walks<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np_aw_t<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="basics-concepts_files/basics-concepts_160_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Select last row from np_aw_t: ends</span>ends <span class="token operator">=</span> np_aw_t<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Plot histogram of ends, display plot</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>ends<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="basics-concepts_files/basics-concepts_161_0.png" alt="png"></p><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>ends<span class="token operator">></span><span class="token number">60</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.776</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> oswd <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;pythonCheatSheet.pdf&#39;, &#39;Python Data Science Toolbox (Part 1).ipynb&#39;, &#39;Untitled1.ipynb&#39;, &#39;.DS_Store&#39;, &#39;Manipulating DataFrames with pandas.ipynb&#39;, &#39;code for download xiaomuren.ipynb&#39;, &#39;Extreme Gradient Boosting with XGBoost.ipynb&#39;, &#39;Untitled.ipynb&#39;, &#39;Fannie Mae SFLP Project.ipynb&#39;, &#39;Importing Data in Python (Part 2).ipynb&#39;, &#39;notebook.ipynb&#39;, &#39;winequality-red.csv&#39;, &#39;Remote Sensing .ipynb&#39;, &#39;5. EDA.ipynb&#39;, &#39;Interactions among objects and classes.ipynb&#39;, &#39;4. Merge data.ipynb&#39;, &#39;README.md&#39;, &#39;merge data with pandas.ipynb&#39;, &#39;Cleaning Data in Python.ipynb&#39;, &#39;Chinook.sqlite&#39;, &#39;Intermediate Python for Data Science.ipynb&#39;, &#39;5433fa18-9f43-44cc-b228-74672efcd116.pdf&#39;, &#39;Crash course for Python.ipynb&#39;, &#39;Python Data Science Toolbox (Part 2).ipynb&#39;, &#39;.gitattributes&#39;, &#39;3. Clean data.ipynb&#39;, &#39;2. Import Data.ipynb&#39;, &#39;Class and Object.ipynb&#39;, &#39;1. basics-concepts.ipynb&#39;, &#39;.ipynb_checkpoints&#39;, &#39;Notes of reading &quot;python for data science&quot;.ipynb&#39;, &#39;challenge TDI.ipynb&#39;, &#39;.git&#39;, &#39;A8 (1).ipynb&#39;, &#39;Case about Medals.ipynb&#39;, &#39;Case about policing activities.ipynb&#39;, &#39;Importing Data in Python (Part 1).ipynb&#39;, &#39;pandas Foundations.ipynb&#39;, &#39;2. Import Data.ipynb.save&#39;, &#39;recipeitems-latest.json&#39;]</code></pre><p>完结撒花！<br><img src="https://www.dropbox.com/s/9w3nxj755iqxnrz/sahua.gif?dl=1" alt></p>]]></content>
      
      
      <categories>
          
          <category> Courses </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> data science </tag>
            
            <tag> concepts </tag>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use Hexo and deploy to GitHub Pages</title>
      <link href="/2020/04/27/hexo-use/"/>
      <url>/2020/04/27/hexo-use/</url>
      
        <content type="html"><![CDATA[<h2 id="How-to-use-Hexo-and-deploy-to-GitHub-Pages"><a href="#How-to-use-Hexo-and-deploy-to-GitHub-Pages" class="headerlink" title="How to use Hexo and deploy to GitHub Pages"></a>How to use Hexo and deploy to GitHub Pages</h2><ul><li><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></li><li><a href="https://hexo.io/docs/" target="_blank" rel="noopener">https://hexo.io/docs/</a></li></ul><h3 id="1-Install-Hexo"><a href="#1-Install-Hexo" class="headerlink" title="1. Install Hexo"></a>1. Install Hexo</h3><pre><code>$ sudo npm install -g hexo-cli$ hexo -vhexo-cli: 0.1.9os: Darwin 14.3.0 darwin x64http_parser: 2.3node: 0.12.7v8: 3.28.71.19uv: 1.6.1zlib: 1.2.8modules: 14openssl: 1.0.1p</code></pre><h3 id="2-Create-a-project-for-your-GitHub-Pages"><a href="#2-Create-a-project-for-your-GitHub-Pages" class="headerlink" title="2. Create a project for your GitHub Pages"></a>2. Create a project for your GitHub Pages</h3><pre><code>$ hexo init yt8yt.github.ioINFO  Copying data to ~/***/yt8yt.github.ioINFO  You are almost done! Don&#39;t forget to run &#39;npm install&#39; before you start blogging with Hexo!$ cd yt8yt.github.io$ npm install</code></pre><h3 id="3-Run-a-test-server-for-your-page-on-Mac"><a href="#3-Run-a-test-server-for-your-page-on-Mac" class="headerlink" title="3. Run a test server for your page on Mac"></a>3. Run a test server for your page on Mac</h3><pre><code>$ hexo serverINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></pre><h3 id="4-Set-information-for-your-new-blog"><a href="#4-Set-information-for-your-new-blog" class="headerlink" title="4. Set information for your new blog"></a>4. Set information for your new blog</h3><p><a href="https://hexo.io/docs/configuration.html" target="_blank" rel="noopener">https://hexo.io/docs/configuration.html</a></p><pre><code>$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# Sitetitle: yt8yt&#39;s notesubtitle:description: yt8yt&#39;s personal blogauthor: yt8ytlanguage:timezone: Japan# URL## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;url: http://yt8yt.github.io/root: /permalink: :year/:month/:day/:title/permalink_defaults:</code></pre><h3 id="5-Set-information-to-use-Git"><a href="#5-Set-information-to-use-Git" class="headerlink" title="5. Set information to use Git"></a>5. Set information to use Git</h3><p><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">https://github.com/hexojs/hexo-deployer-git</a></p><pre><code>$ npm install hexo-deployer-git --save$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:yt8yt/yt8yt.github.io.git  branch: master</code></pre><h3 id="6-Set-“watch”-before-starting-your-work"><a href="#6-Set-“watch”-before-starting-your-work" class="headerlink" title="6. Set “watch” before starting your work"></a>6. Set “watch” before starting your work</h3><p>“watch” command can monitor your files.<br><a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">https://hexo.io/docs/generating.html</a></p><pre><code>$ hexo generate --watch</code></pre><h3 id="7-Create-a-new-post-file"><a href="#7-Create-a-new-post-file" class="headerlink" title="7. Create a new post file"></a>7. Create a new post file</h3><pre><code>$ hexo new first-postINFO  Created: ~/***/yt8yt.github.io/source/_posts/first-post.md</code></pre><h3 id="8-Edit-the-above-file-with-Markdown-or-Hexo’s-Helper"><a href="#8-Edit-the-above-file-with-Markdown-or-Hexo’s-Helper" class="headerlink" title="8. Edit the above file with Markdown or Hexo’s Helper"></a>8. Edit the above file with Markdown or Hexo’s Helper</h3><p>Hexo’s Helper<br><a href="https://hexo.io/docs/helpers.html" target="_blank" rel="noopener">https://hexo.io/docs/helpers.html</a><br>I use Atom with “shift + control + m” when I use Markdown :-)<br><a href="https://atom.io/" target="_blank" rel="noopener">https://atom.io/</a></p><h3 id="9-Delete-“source-posts-hello-world-md”"><a href="#9-Delete-“source-posts-hello-world-md”" class="headerlink" title="9. Delete “source/_posts/hello-world.md”"></a>9. Delete “source/_posts/hello-world.md”</h3><p>It’s not necessary to deploy.</p><h3 id="10-Deploy-your-new-blog"><a href="#10-Deploy-your-new-blog" class="headerlink" title="10. Deploy your new blog!!"></a>10. Deploy your new blog!!</h3><p><a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html</a></p><pre><code>$ hexo clean$ hexo deploy</code></pre><p>After writting the above command, you can see your new blog on GitHub Pages.<br>http://<strong>**</strong>.github.io/</p><h3 id="11-Change-your-blog-theme"><a href="#11-Change-your-blog-theme" class="headerlink" title="11. Change your blog theme"></a>11. Change your blog theme</h3><p><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">https://github.com/hexojs/hexo/wiki/Themes</a></p><pre><code>For instance, How to use the following theme.https://hexo.io/hexo-theme-light/## Install it$ cd yt8yt.github.io$ git clone git://github.com/tommy351/hexo-theme-light.git themes/light## Update the above files$ themes/light$ git pull## Set information to use the theme$ cd yt8yt.github.io$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: light</code></pre><h3 id="12-Create-a-new-page-file"><a href="#12-Create-a-new-page-file" class="headerlink" title="12. Create a new page file"></a>12. Create a new page file</h3><p><a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/docs/writing.html</a></p><pre><code>$ hexo new page aboutmeINFO  Created: ~/***/yt8yt.github.io/source/aboutme/index.md$ cd source/aboutme/$ vi index.md</code></pre><h3 id="13-Use-“Read-More”"><a href="#13-Use-“Read-More”" class="headerlink" title="13. Use “Read More”"></a>13. Use “Read More”</h3><p>Write <code>&lt;!-- more --&gt;</code> in your articles.  </p><h3 id="14-Use-Plugins"><a href="#14-Use-Plugins" class="headerlink" title="14. Use Plugins"></a>14. Use Plugins</h3><p><a href="https://github.com/hexojs/hexo/wiki/Plugins" target="_blank" rel="noopener">https://github.com/hexojs/hexo/wiki/Plugins</a></p>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github pages </tag>
            
            <tag> web sites </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clustering Heart Disease Patient Data with R</title>
      <link href="/2020/04/27/pro-heart-disease/"/>
      <url>/2020/04/27/pro-heart-disease/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Targeting-treatment-for-heart-disease-patients"><a href="#1-Targeting-treatment-for-heart-disease-patients" class="headerlink" title="1. Targeting treatment for heart disease patients"></a>1. Targeting treatment for heart disease patients</h2><p>Clustering algorithms are used to group together items that are similar to one another. There are many industries where it would be beneficial and insightful to use an unsupervised learning algorithm - retailers want to group similar customers for targeted ad campaigns, biologists want to find plants that share similar characteristics, and more. We are going to explore if it would be appropriate to use some clustering algorithms to group medical patients. </p><p><img src="https://assets.datacamp.com/production/project_552/img/images-3.jpeg" alt></p><p>We are going to look at anonymized patients who have been diagnosed with heart disease. Patients with similar characteristics might respond to the same treatments, and doctors would benefit from learning about the outcomes of patients similar to those they are treating. The data we are analyzing comes from the V.A. Medical Center in Long Beach, CA. For more information, see <a href="http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/heart-disease.names" target="_blank" rel="noopener">here</a>, and to download the data visit <a href="https://archive.ics.uci.edu/ml/datasets/heart+Disease" target="_blank" rel="noopener">here</a>. </p><p>Before beginning a project, it is important to get an idea of what the patient data looks like. In addition, the clustering algorithms used below require that the data be numeric, so it is necessary to ensure the patient data doesn't need any transformations. You will also be brushing up on your base R skills for some analysis.</p><pre class="line-numbers language-R"><code class="language-R"># Loading the dataheart_disease = read.csv("datasets/heart_disease_patients.csv")# Print the first ten rows of the data sethead(heart_disease, n=10)# Check that only numeric variableslapply(heart_disease, class)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><caption>A data.frame: 10 x 12</caption><thead>    <tr><th scope="col">id</th><th scope="col">age</th><th scope="col">sex</th><th scope="col">cp</th><th scope="col">trestbps</th><th scope="col">chol</th><th scope="col">fbs</th><th scope="col">restecg</th><th scope="col">thalach</th><th scope="col">exang</th><th scope="col">oldpeak</th><th scope="col">slope</th></tr>    <tr><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;int&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;int&gt;</th></tr></thead><tbody>    <tr><td> 1</td><td>63</td><td>1</td><td>1</td><td>145</td><td>233</td><td>1</td><td>2</td><td>150</td><td>0</td><td>2.3</td><td>3</td></tr>    <tr><td> 2</td><td>67</td><td>1</td><td>4</td><td>160</td><td>286</td><td>0</td><td>2</td><td>108</td><td>1</td><td>1.5</td><td>2</td></tr>    <tr><td> 3</td><td>67</td><td>1</td><td>4</td><td>120</td><td>229</td><td>0</td><td>2</td><td>129</td><td>1</td><td>2.6</td><td>2</td></tr>    <tr><td> 4</td><td>37</td><td>1</td><td>3</td><td>130</td><td>250</td><td>0</td><td>0</td><td>187</td><td>0</td><td>3.5</td><td>3</td></tr>    <tr><td> 5</td><td>41</td><td>0</td><td>2</td><td>130</td><td>204</td><td>0</td><td>2</td><td>172</td><td>0</td><td>1.4</td><td>1</td></tr>    <tr><td> 6</td><td>56</td><td>1</td><td>2</td><td>120</td><td>236</td><td>0</td><td>0</td><td>178</td><td>0</td><td>0.8</td><td>1</td></tr>    <tr><td> 7</td><td>62</td><td>0</td><td>4</td><td>140</td><td>268</td><td>0</td><td>2</td><td>160</td><td>0</td><td>3.6</td><td>3</td></tr>    <tr><td> 8</td><td>57</td><td>0</td><td>4</td><td>120</td><td>354</td><td>0</td><td>0</td><td>163</td><td>1</td><td>0.6</td><td>1</td></tr>    <tr><td> 9</td><td>63</td><td>1</td><td>4</td><td>130</td><td>254</td><td>0</td><td>2</td><td>147</td><td>0</td><td>1.4</td><td>2</td></tr>    <tr><td>10</td><td>53</td><td>1</td><td>4</td><td>140</td><td>203</td><td>1</td><td>2</td><td>155</td><td>1</td><td>3.1</td><td>3</td></tr></tbody></table><dl>    <dt>$id</dt>        <dd>'integer'</dd>    <dt>$age</dt>        <dd>'integer'</dd>    <dt>$sex</dt>        <dd>'integer'</dd>    <dt>$cp</dt>        <dd>'integer'</dd>    <dt>$trestbps</dt>        <dd>'integer'</dd>    <dt>$chol</dt>        <dd>'integer'</dd>    <dt>$fbs</dt>        <dd>'integer'</dd>    <dt>$restecg</dt>        <dd>'integer'</dd>    <dt>$thalach</dt>        <dd>'integer'</dd>    <dt>$exang</dt>        <dd>'integer'</dd>    <dt>$oldpeak</dt>        <dd>'numeric'</dd>    <dt>$slope</dt>        <dd>'integer'</dd></dl><h2 id="2-Quantifying-patient-differences"><a href="#2-Quantifying-patient-differences" class="headerlink" title="2. Quantifying patient differences"></a>2. Quantifying patient differences</h2><p>It is important to conduct some exploratory data analysis to familiarize ourselves with the data before clustering. This will help us learn more about the variables and make an informed decision about whether we should scale the data. Because k-means and hierarchical clustering measures similarity between points using a distance formula, it can place extra emphasis on certain variables that have a larger scale and thus larger differences between points.</p><p>Exploratory data analysis helps us to understand the characteristics of the patients in the data. We need to get an idea of the value ranges of the variables and their distributions. This will also be helpful when we evaluate the clusters of patients from the algorithms. Are there more patients of one gender? What might an outlier look like?</p><pre class="line-numbers language-R"><code class="language-R"># Evidence that the data should be scaled?summary(heart_disease)# Remove idheart_disease = heart_disease[ , !(names(heart_disease) %in% c("id"))]# Scaling data and saving as a data framescaled = scale(heart_disease)# What does data look like now?summary(scaled)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>       id             age             sex               cp        Min.   :  1.0   Min.   :29.00   Min.   :0.0000   Min.   :1.000   1st Qu.: 76.5   1st Qu.:48.00   1st Qu.:0.0000   1st Qu.:3.000   Median :152.0   Median :56.00   Median :1.0000   Median :3.000   Mean   :152.0   Mean   :54.44   Mean   :0.6799   Mean   :3.158   3rd Qu.:227.5   3rd Qu.:61.00   3rd Qu.:1.0000   3rd Qu.:4.000   Max.   :303.0   Max.   :77.00   Max.   :1.0000   Max.   :4.000      trestbps          chol            fbs            restecg       Min.   : 94.0   Min.   :126.0   Min.   :0.0000   Min.   :0.0000   1st Qu.:120.0   1st Qu.:211.0   1st Qu.:0.0000   1st Qu.:0.0000   Median :130.0   Median :241.0   Median :0.0000   Median :1.0000   Mean   :131.7   Mean   :246.7   Mean   :0.1485   Mean   :0.9901   3rd Qu.:140.0   3rd Qu.:275.0   3rd Qu.:0.0000   3rd Qu.:2.0000   Max.   :200.0   Max.   :564.0   Max.   :1.0000   Max.   :2.0000      thalach          exang           oldpeak         slope       Min.   : 71.0   Min.   :0.0000   Min.   :0.00   Min.   :1.000   1st Qu.:133.5   1st Qu.:0.0000   1st Qu.:0.00   1st Qu.:1.000   Median :153.0   Median :0.0000   Median :0.80   Median :2.000   Mean   :149.6   Mean   :0.3267   Mean   :1.04   Mean   :1.601   3rd Qu.:166.0   3rd Qu.:1.0000   3rd Qu.:1.60   3rd Qu.:2.000   Max.   :202.0   Max.   :1.0000   Max.   :6.20   Max.   :3.000        age               sex                cp             trestbps        Min.   :-2.8145   Min.   :-1.4549   Min.   :-2.2481   Min.   :-2.14149   1st Qu.:-0.7124   1st Qu.:-1.4549   1st Qu.:-0.1650   1st Qu.:-0.66420   Median : 0.1727   Median : 0.6851   Median :-0.1650   Median :-0.09601   Mean   : 0.0000   Mean   : 0.0000   Mean   : 0.0000   Mean   : 0.00000   3rd Qu.: 0.7259   3rd Qu.: 0.6851   3rd Qu.: 0.8765   3rd Qu.: 0.47218   Max.   : 2.4961   Max.   : 0.6851   Max.   : 0.8765   Max.   : 3.88132        chol              fbs             restecg             thalach        Min.   :-2.3310   Min.   :-0.4169   Min.   :-0.995103   Min.   :-3.4364   1st Qu.:-0.6894   1st Qu.:-0.4169   1st Qu.:-0.995103   1st Qu.:-0.7041   Median :-0.1100   Median :-0.4169   Median : 0.009951   Median : 0.1483   Mean   : 0.0000   Mean   : 0.0000   Mean   : 0.000000   Mean   : 0.0000   3rd Qu.: 0.5467   3rd Qu.:-0.4169   3rd Qu.: 1.015005   3rd Qu.: 0.7166   Max.   : 6.1283   Max.   : 2.3905   Max.   : 1.015005   Max.   : 2.2904       exang            oldpeak            slope         Min.   :-0.6955   Min.   :-0.8954   Min.   :-0.9747   1st Qu.:-0.6955   1st Qu.:-0.8954   1st Qu.:-0.9747   Median :-0.6955   Median :-0.2064   Median : 0.6480   Mean   : 0.0000   Mean   : 0.0000   Mean   : 0.0000   3rd Qu.: 1.4331   3rd Qu.: 0.4827   3rd Qu.: 0.6480   Max.   : 1.4331   Max.   : 4.4445   Max.   : 2.2708  </code></pre><h2 id="3-Let’s-start-grouping-patients"><a href="#3-Let’s-start-grouping-patients" class="headerlink" title="3. Let’s start grouping patients"></a>3. Let’s start grouping patients</h2><p>Once we've figured out if we need to modify the data and made any necessary changes, we can now start the clustering process. For the k-means algorithm, it is necessary to select the number of clusters in advance.</p><p>It is also important to make sure that your results are reproducible when conducting a statistical analysis. This means that when someone runs your code on the same data, they will get the same results as you reported. Therefore, if you're conducting an analysis that has a random aspect, it is necessary to set a seed to ensure reproducibility.</p><p>Reproducibility is especially important since doctors will potentially be using our results to treat patients. It is vital that another analyst can see where the groups come from and be able to verify the results. </p><pre class="line-numbers language-R"><code class="language-R"># Set the seed so that results are reproducibleseed_val = 10set.seed(seed_val, kind = "Mersenne-Twister", normal.kind = "Inversion")# Select a number of clustersk = 5# Run the k-means algorithmsfirst_clust = kmeans(scaled, centers = k, nstart = 1)# How many patients are in each group?first_clust$size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol class="list-inline">    <li>24</li>    <li>53</li>    <li>87</li>    <li>72</li>    <li>67</li></ol><h2 id="4-Another-round-of-k-means"><a href="#4-Another-round-of-k-means" class="headerlink" title="4. Another round of k-means"></a>4. Another round of k-means</h2><p>Because the k-means algorithm initially selects the cluster centers by randomly selecting points, different iterations of the algorithm can result in different clusters being created. If the algorithm is truly grouping together similar observations (as opposed to clustering noise), then cluster assignments will be somewhat robust between different iterations of the algorithm. </p><p>With regards to the heart disease data, this would mean that the same patients would be grouped together even when the algorithm is initialized at different random points. If patients are not in similar clusters with various algorithm runs, then the clustering method isn't picking up on meaningful relationships between patients. </p><p>We're going to explore how the patients are grouped together with another iteration of the k-means algorithm. We will then be able to compare the resulting groups of patients. </p><pre class="line-numbers language-R"><code class="language-R"># Set the seedseed_val = 38set.seed(seed_val, kind = "Mersenne-Twister", normal.kind = "Inversion")# Run the k-means algorithmsk = 5second_clust = kmeans(scaled, center=k, nstart=1)# How many patients are in each group?second_clust$size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol class="list-inline">    <li>51</li>    <li>48</li>    <li>42</li>    <li>67</li>    <li>95</li></ol><pre class="line-numbers language-R"><code class="language-R">second_clust<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>K-means clustering with 5 clusters of sizes 51, 48, 42, 67, 95Cluster means:         age         sex          cp    trestbps        chol        fbs1  0.5892201 -0.99332950 -0.22626141  0.29392331  0.74931318 -0.36189722  0.6221668  0.01633219  0.05199058  0.08154839 -0.11518458 -0.41694483  0.2938813  0.12460389 -0.09059989  0.48164882 -0.04695460  2.39048354  0.1793139  0.26985337  0.76771887  0.01677897  0.07078713 -0.37504295 -0.8870661  0.27960337 -0.40619142 -0.42376687 -0.37322902 -0.3873929     restecg     thalach       exang     oldpeak      slope1  0.2267274  0.35060936 -0.52853177 -0.58127000 -0.65654732  0.3030918 -0.47190204 -0.65113441  0.79127477  0.81708093  0.1535302  0.01404637  0.06473083  0.02946025  0.14575194  0.1149567 -0.89955878  1.43311039  0.62405541  0.64804125 -0.4238092  0.67842854 -0.42660546 -0.54089960 -0.5818559Clustering vector:  [1] 3 4 4 2 5 5 2 1 2 3 2 1 3 5 3 5 5 5 1 5 2 3 2 2 4 5 1 2 5 4 1 3 1 2 5 5 4 [38] 4 4 3 2 5 1 3 1 2 5 2 1 3 5 5 5 5 4 4 5 5 2 5 4 4 4 3 2 4 2 5 4 2 1 3 4 1 [75] 5 1 4 1 5 4 4 1 5 3 5 5 5 1 1 1 2 2 2 5 1 5 4 2 5 5 5 5 1 3 2 5 5 2 4 5 4[112] 3 5 3 2 5 3 5 3 2 3 2 4 4 3 5 3 4 5 1 2 5 5 5 5 1 4 2 4 3 5 1 3 4 4 5 3 5[149] 5 1 3 2 1 4 4 2 4 1 2 1 5 1 2 2 3 5 5 3 5 5 4 4 4 1 2 4 3 4 5 3 5 4 5 2 1[186] 1 3 4 1 2 5 4 3 3 2 4 3 4 5 1 1 1 3 1 5 4 4 4 5 4 5 5 5 3 5 2 5 4 2 1 5 1[223] 5 4 4 5 5 1 4 4 1 4 5 1 1 4 4 5 1 5 5 5 1 2 3 2 5 4 5 3 4 2 4 1 5 5 1 2 1[260] 5 5 3 1 5 4 4 3 3 5 5 4 2 4 2 5 2 1 5 1 2 4 5 4 5 5 2 3 5 5 5 2 1 4 4 4 5[297] 3 4 5 3 4 1 5Within cluster sum of squares by cluster:[1] 368.7387 378.1541 398.0430 458.2080 580.3240 (between_SS / total_SS =  34.3 %)Available components:[1] &quot;cluster&quot;      &quot;centers&quot;      &quot;totss&quot;        &quot;withinss&quot;     &quot;tot.withinss&quot;[6] &quot;betweenss&quot;    &quot;size&quot;         &quot;iter&quot;         &quot;ifault&quot;      </code></pre><h2 id="5-Comparing-patient-clusters"><a href="#5-Comparing-patient-clusters" class="headerlink" title="5. Comparing patient clusters"></a>5. Comparing patient clusters</h2><p>It is important that the clusters resulting from the k-means algorithm are stable. Even though the algorithm begins by randomly initializing the cluster centers, if the k-means algorithm is the right choice for the data, then different initializations of the algorithm will result in similar clusters.</p><p>The clusters from different iterations may not be exactly the same, but the clusters should be roughly the same size and have similar distributions of variables. If there is a lot of change in clusters between different iterations of the algorithm, then k-means clustering is not a good choice for the data. </p><p>It is not possible to validate that the clusters obtained from an algorithm are ground truth are accurate since there is no true labeling for patients. Thus, it is necessary to examine how the clusters change between different iterations of the algorithm. We're going to use some visualizations to get an idea of the cluster stabilities. That way we can see how certain patient characteristics may have been used to group patients together.</p><pre class="line-numbers language-R"><code class="language-R"># Adding cluster assignments to the dataheart_disease["first_clust"] = first_clust$clusterheart_disease["second_clust"] = second_clust$cluster# Load ggplot2library(ggplot2)# Creating the plots of age and chol for the first clustering algorithmplot_one = ggplot(heart_disease, aes(x =age, y = chol, color = as.factor(first_clust))) +   geom_point()plot_one # Creating the plots of age and chol for the second clustering algorithmplot_two = ggplot(heart_disease, aes(x = age, y = chol, color = as.factor(second_clust))) +   geom_point()plot_two<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="notebook_10_0.png" alt></p><p><img src="notebook_10_1.png" alt="testing"></p><h2 id="6-Hierarchical-clustering-another-clustering-approach"><a href="#6-Hierarchical-clustering-another-clustering-approach" class="headerlink" title="6. Hierarchical clustering: another clustering approach"></a>6. Hierarchical clustering: another clustering approach</h2><p>An alternative to k-means clustering is hierarchical clustering. This method works well when the data has a nested structure. It is possible that the data from heart disease patients follows this type of structure. For example, if men are more likely to exhibit certain characteristics, those characteristics might be nested inside the gender variable. Hierarchical clustering also does not require the number of clusters to be selected prior to running the algorithm. </p><p>Clusters can be selected by using the dendrogram. The dendrogram allows one to see how similar observations are to one another and are useful in selecting the number of clusters to group the data. It is now time for us to see how hierarchical clustering groups the data. </p><pre class="line-numbers language-R"><code class="language-R"># Executing hierarchical clustering with complete linkagehier_clust_1 = hclust(dist(scaled), method= "complete")# Printing the dendrogramplot(hier_clust_1)# Getting cluster assignments based on number of selected clustershc_1_assign <- cutree(hier_clust_1, 5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="notebook_12_0.png" alt></p><h2 id="7-Hierarchical-clustering-round-two"><a href="#7-Hierarchical-clustering-round-two" class="headerlink" title="7. Hierarchical clustering round two"></a>7. Hierarchical clustering round two</h2><p>In hierarchical clustering, there are multiple ways to measure the dissimilarity between clusters of observations. Complete linkage records the largest dissimilarity between any two points in the two clusters being compared. On the other hand, single linkage is the smallest dissimilarity between any two points in the clusters. Different linkages will result in different clusters being formed. </p><p>We want to explore different algorithms to group our heart disease patients. The best way to measure dissimilarity between patients could be to look at the smallest difference between patients and minimize that difference when grouping together clusters. It is always a good idea to explore different dissimilarity measures. Let's implement hierarchical clustering using a new linkage function. </p><pre class="line-numbers language-R"><code class="language-R"># Executing hierarchical clustering with single linkagehier_clust_2 = hclust(dist(scaled), method = "single")# Printing the dendrogramplot(hier_clust_2)# Getting cluster assignments based on number of selected clustershc_2_assign <- cutree(hier_clust_2, 5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="notebook_14_0.png" alt></p><h2 id="8-Comparing-clustering-results"><a href="#8-Comparing-clustering-results" class="headerlink" title="8. Comparing clustering results"></a>8. Comparing clustering results</h2><p>The doctors are interested in grouping similar patients together in order to determine appropriate treatments. Therefore, they want to have clusters with more than a few patients to see different treatment options. While it is possible for a patient to be in a cluster by themselves, this means that the treatment they received might not be recommended for someone else in the group. </p><p>As with the k-means algorithm, the way to evaluate the clusters is to investigate which patients are being grouped together. Are there patterns evident in the cluster assignments or do they seem to be groups of noise? We're going to examine the clusters resulting from the two hierarchical algorithms. </p><pre class="line-numbers language-R"><code class="language-R"># Adding assignments of chosen hierarchical linkageheart_disease['hc_clust'] = hc_1_assign# Remove 'sex', 'first_clust', and 'second_clust' variableshd_simple = heart_disease[, !(names(heart_disease) %in% c("sex", "first_clust", "second_clust"))]# Getting mean and standard deviation summary statisticsclust_summary = do.call(data.frame, aggregate(. ~ hc_clust, data = hd_simple, function(x) c(avg = mean(x), sd = sd(x))))clust_summary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><caption>A data.frame: 5 x 21</caption><thead>    <tr><th scope="col">hc_clust</th><th scope="col">age.avg</th><th scope="col">age.sd</th><th scope="col">cp.avg</th><th scope="col">cp.sd</th><th scope="col">trestbps.avg</th><th scope="col">trestbps.sd</th><th scope="col">chol.avg</th><th scope="col">chol.sd</th><th scope="col">fbs.avg</th><th scope="col">...</th><th scope="col">restecg.avg</th><th scope="col">restecg.sd</th><th scope="col">thalach.avg</th><th scope="col">thalach.sd</th><th scope="col">exang.avg</th><th scope="col">exang.sd</th><th scope="col">oldpeak.avg</th><th scope="col">oldpeak.sd</th><th scope="col">slope.avg</th><th scope="col">slope.sd</th></tr>    <tr><th scope="col">&lt;int&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">...</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th><th scope="col">&lt;dbl&gt;</th></tr></thead><tbody>    <tr><td>1</td><td>51.41667</td><td>8.540979</td><td>2.783333</td><td>0.9470625</td><td>129.1389</td><td>15.93800</td><td>239.8722</td><td>42.29228</td><td>0.1222222</td><td>...</td><td>0.8444444</td><td>0.9905826</td><td>161.5722</td><td>15.779214</td><td>0.07777778</td><td>0.2685686</td><td>0.555000</td><td>0.7847196</td><td>1.388889</td><td>0.5730336</td></tr>    <tr><td>2</td><td>58.11111</td><td>7.754246</td><td>3.763889</td><td>0.6165112</td><td>130.0417</td><td>13.90657</td><td>253.2222</td><td>49.74476</td><td>0.1805556</td><td>...</td><td>1.4027778</td><td>0.9140488</td><td>135.5417</td><td>17.991342</td><td>0.81944444</td><td>0.3873488</td><td>1.451389</td><td>1.0804268</td><td>1.750000</td><td>0.5240686</td></tr>    <tr><td>3</td><td>61.00000</td><td>3.908034</td><td>3.916667</td><td>0.2886751</td><td>168.5000</td><td>17.45904</td><td>284.9167</td><td>53.00336</td><td>0.3333333</td><td>...</td><td>1.2500000</td><td>0.9653073</td><td>147.7500</td><td>13.157266</td><td>0.75000000</td><td>0.4522670</td><td>2.316667</td><td>1.4708274</td><td>2.166667</td><td>0.5773503</td></tr>    <tr><td>4</td><td>59.00000</td><td>9.203580</td><td>3.571429</td><td>0.8501112</td><td>134.7714</td><td>18.64070</td><td>233.8571</td><td>49.67136</td><td>0.1428571</td><td>...</td><td>0.6857143</td><td>0.9321521</td><td>116.8857</td><td>17.842071</td><td>0.48571429</td><td>0.5070926</td><td>2.240000</td><td>1.3856831</td><td>2.200000</td><td>0.4058397</td></tr>    <tr><td>5</td><td>64.75000</td><td>2.061553</td><td>3.250000</td><td>0.5000000</td><td>138.7500</td><td>18.42779</td><td>433.7500</td><td>89.93470</td><td>0.2500000</td><td>...</td><td>2.0000000</td><td>0.0000000</td><td>156.2500</td><td> 3.774917</td><td>0.00000000</td><td>0.0000000</td><td>1.100000</td><td>0.3829708</td><td>1.500000</td><td>0.5773503</td></tr></tbody></table><h2 id="9-Visualizing-the-cluster-contents"><a href="#9-Visualizing-the-cluster-contents" class="headerlink" title="9. Visualizing the cluster contents"></a>9. Visualizing the cluster contents</h2><p>In addition to looking at the distributions of variables in each of the hierarchical clustering runs, we will make visualizations to evaluate the algorithms. Even though the data has more than two dimensions, we can get an idea of how the data clusters by looking at a scatter plot of two variables. We want to look for patterns that appear in the data and see what patients get clustered together. </p><pre class="line-numbers language-R"><code class="language-R"># Plotting age and cholplot_one = ggplot(heart_disease, aes(x = age, y = chol, color = as.factor(hc_clust))) +   geom_point()plot_one # Plotting oldpeak and trestbpsplot_two = ggplot(heart_disease, aes(x = oldpeak, y = trestbps, color = as.factor(hc_clust))) +   geom_point()plot_two<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="notebook_18_0.png" alt></p><p><img src="/notebook/notebook_18_1.png" alt></p><h2 id="10-Conclusion"><a href="#10-Conclusion" class="headerlink" title="10. Conclusion"></a>10. Conclusion</h2><p>Now that we've tried out multiple clustering algorithms, it is necessary to determine if we think any of them will work for clustering our patients. For the k-means algorithm, it is imperative that similar clusters are produced for each iteration of the algorithm. We want to make sure that the algorithm is clustering signal as opposed to noise. </p><p>For the sake of the doctors, we also want to have multiple patients in each group so they can compare treatments. We only did some preliminary work to explore the performance of the algorithms, and it is necessary to explore further before making a recomendation. Based on the above analysis are there any algorithms that you would want to investigate further to group patients? </p><p>Remember that it is important the k-mean algorithm seems stable when running multiple iterations. This means that we would see similar groups of patients showing up in the plots from the different iterations of the algorithm. For the hierarchical clustering, we need a method that puts a balanced number of patients in each group. </p><pre class="line-numbers language-R"><code class="language-R"># Add TRUE if the algorithm shows promise, add FALSE if it does notexplore_kmeans = TRUEexplore_hierarch_complete = FALSEexplore_hierarch_single = FALSE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Clustering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data science </tag>
            
            <tag> machine learning </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
